["#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump float _OutlineWidth;\nattribute highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0.xyz = in_NORMAL0.xyz * vec3(_OutlineWidth) + in_POSITION0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _OutlineColor;\n#define SV_Target0 gl_FragData[0]\nvoid main()\n{\n    SV_Target0 = _OutlineColor;\n    return;\n}\n\n","#version 100\n\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying mediump vec3 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD6;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz;\n    u_xlat16_2 = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);\n    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);\n    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform lowp sampler2D _MainTex;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying mediump vec3 vs_TEXCOORD3;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nvec3 u_xlat1;\nlowp vec3 u_xlat10_2;\nmediump vec3 u_xlat16_3;\nvec4 u_xlat4;\nmediump vec3 u_xlat16_5;\nlowp vec4 u_xlat10_5;\nvec3 u_xlat6;\nlowp vec4 u_xlat10_6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nbvec3 u_xlatb9;\nvec3 u_xlat10;\nmediump vec3 u_xlat16_10;\nmediump float u_xlat16_11;\nvec3 u_xlat12;\nmediump vec3 u_xlat16_23;\nfloat u_xlat24;\nfloat u_xlat36;\nfloat u_xlat37;\nbool u_xlatb37;\nmediump float u_xlat16_39;\nmediump float u_xlat16_46;\nvoid main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat36 = inversesqrt(u_xlat36);\n    u_xlat1.xyz = vec3(u_xlat36) * u_xlat0.xyz;\n    u_xlat10_2.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_3.x = dot((-u_xlat1.xyz), vs_TEXCOORD1.xyz);\n    u_xlat16_3.x = u_xlat16_3.x + u_xlat16_3.x;\n    u_xlat16_3.xyz = vs_TEXCOORD1.xyz * (-u_xlat16_3.xxx) + (-u_xlat1.xyz);\n    u_xlat4.xyz = vs_TEXCOORD1.xyz;\n    u_xlat4.w = 1.0;\n    u_xlat16_5.x = dot(unity_SHAr, u_xlat4);\n    u_xlat16_5.y = dot(unity_SHAg, u_xlat4);\n    u_xlat16_5.z = dot(unity_SHAb, u_xlat4);\n    u_xlat16_5.xyz = u_xlat16_5.xyz + vs_TEXCOORD3.xyz;\n    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat4.xyz = log2(u_xlat16_5.xyz);\n    u_xlat4.xyz = u_xlat4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat4.xyz = exp2(u_xlat4.xyz);\n    u_xlat4.xyz = u_xlat4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat4.xyz = max(u_xlat4.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb37 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb37){\n        u_xlat37 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n        u_xlat37 = inversesqrt(u_xlat37);\n        u_xlat6.xyz = vec3(u_xlat37) * u_xlat16_3.xyz;\n        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;\n        u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;\n        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat7;\n            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;\n            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;\n            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;\n            u_xlat7 = hlslcc_movcTemp;\n        }\n        u_xlat37 = min(u_xlat7.y, u_xlat7.x);\n        u_xlat37 = min(u_xlat7.z, u_xlat37);\n        u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat37) + u_xlat7.xyz;\n    } else {\n        u_xlat6.xyz = u_xlat16_3.xyz;\n    }\n    u_xlat10_5 = textureCubeLodEXT(unity_SpecCube0, u_xlat6.xyz, 6.0);\n    u_xlat16_39 = u_xlat10_5.w + -1.0;\n    u_xlat16_39 = unity_SpecCube0_HDR.w * u_xlat16_39 + 1.0;\n    u_xlat16_39 = u_xlat16_39 * unity_SpecCube0_HDR.x;\n    u_xlat16_10.xyz = u_xlat10_5.xyz * vec3(u_xlat16_39);\n    u_xlatb37 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb37){\n        u_xlatb37 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb37){\n            u_xlat37 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n            u_xlat37 = inversesqrt(u_xlat37);\n            u_xlat6.xyz = vec3(u_xlat37) * u_xlat16_3.xyz;\n            u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;\n            u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat7;\n                hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;\n                hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;\n                hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;\n                u_xlat7 = hlslcc_movcTemp;\n            }\n            u_xlat37 = min(u_xlat7.y, u_xlat7.x);\n            u_xlat37 = min(u_xlat7.z, u_xlat37);\n            u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat37) + u_xlat7.xyz;\n        } else {\n            u_xlat6.xyz = u_xlat16_3.xyz;\n        }\n        u_xlat10_6 = textureCubeLodEXT(unity_SpecCube1, u_xlat6.xyz, 6.0);\n        u_xlat16_3.x = u_xlat10_6.w + -1.0;\n        u_xlat16_3.x = unity_SpecCube1_HDR.w * u_xlat16_3.x + 1.0;\n        u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube1_HDR.x;\n        u_xlat16_3.xyz = u_xlat10_6.xyz * u_xlat16_3.xxx;\n        u_xlat6.xyz = vec3(u_xlat16_39) * u_xlat10_5.xyz + (-u_xlat16_3.xyz);\n        u_xlat10.xyz = unity_SpecCube0_BoxMin.www * u_xlat6.xyz + u_xlat16_3.xyz;\n        u_xlat16_10.xyz = u_xlat10.xyz;\n    }\n    u_xlat37 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat37 = inversesqrt(u_xlat37);\n    u_xlat6.xyz = vec3(u_xlat37) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = u_xlat10_2.xyz * vec3(0.779083729, 0.779083729, 0.779083729);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat36) + _WorldSpaceLightPos0.xyz;\n    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat36 = max(u_xlat36, 0.00100000005);\n    u_xlat36 = inversesqrt(u_xlat36);\n    u_xlat0.xyz = vec3(u_xlat36) * u_xlat0.xyz;\n    u_xlat36 = dot(u_xlat6.xyz, u_xlat1.xyz);\n    u_xlat1.x = dot(u_xlat6.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat16_39 = u_xlat0.x + u_xlat0.x;\n    u_xlat16_39 = u_xlat16_39 * u_xlat0.x + -0.5;\n    u_xlat16_46 = (-u_xlat1.x) + 1.0;\n    u_xlat16_11 = u_xlat16_46 * u_xlat16_46;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_46 = u_xlat16_46 * u_xlat16_11;\n    u_xlat16_46 = u_xlat16_39 * u_xlat16_46 + 1.0;\n    u_xlat16_11 = -abs(u_xlat36) + 1.0;\n    u_xlat16_23.x = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_23.x = u_xlat16_23.x * u_xlat16_23.x;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_23.x;\n    u_xlat16_39 = u_xlat16_39 * u_xlat16_11 + 1.0;\n    u_xlat16_39 = u_xlat16_39 * u_xlat16_46;\n    u_xlat12.x = u_xlat1.x * u_xlat16_39;\n    u_xlat24 = abs(u_xlat36) + u_xlat1.x;\n    u_xlat24 = u_xlat24 + 9.99999975e-06;\n    u_xlat24 = 0.5 / u_xlat24;\n    u_xlat24 = u_xlat24 * 0.999999881;\n    u_xlat24 = max(u_xlat24, 9.99999975e-05);\n    u_xlat24 = sqrt(u_xlat24);\n    u_xlat24 = u_xlat1.x * u_xlat24;\n    u_xlat16_23.xyz = _LightColor0.xyz * u_xlat12.xxx + u_xlat4.xyz;\n    u_xlat12.xyz = vec3(u_xlat24) * _LightColor0.xyz;\n    u_xlat16_39 = (-u_xlat0.x) + 1.0;\n    u_xlat16_46 = u_xlat16_39 * u_xlat16_39;\n    u_xlat16_46 = u_xlat16_46 * u_xlat16_46;\n    u_xlat16_39 = u_xlat16_39 * u_xlat16_46;\n    u_xlat16_39 = u_xlat16_39 * 0.779083729 + 0.220916301;\n    u_xlat0.xyz = u_xlat12.xyz * vec3(u_xlat16_39);\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_23.xyz + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_10.xyz * vec3(0.720000029, 0.720000029, 0.720000029);\n    u_xlat16_39 = u_xlat16_11 * -2.98023224e-08 + 0.220916301;\n    u_xlat0.xyz = u_xlat16_3.xyz * vec3(u_xlat16_39) + u_xlat0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD4;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform lowp sampler2D _MainTex;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nvec3 u_xlat1;\nlowp vec3 u_xlat10_1;\nvec3 u_xlat2;\nmediump vec4 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nmediump float u_xlat16_8;\nmediump float u_xlat16_13;\nfloat u_xlat15;\nfloat u_xlat16;\nmediump float u_xlat16_18;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.xyz = vec3(u_xlat15) * u_xlat1.xyz;\n    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;\n    u_xlat15 = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat16_3.x = -abs(u_xlat15) + 1.0;\n    u_xlat5.x = abs(u_xlat15) + u_xlat0.x;\n    u_xlat5.x = u_xlat5.x + 9.99999975e-06;\n    u_xlat5.x = 0.5 / u_xlat5.x;\n    u_xlat5.x = u_xlat5.x * 0.999999881;\n    u_xlat5.x = max(u_xlat5.x, 9.99999975e-05);\n    u_xlat5.x = sqrt(u_xlat5.x);\n    u_xlat5.x = u_xlat0.x * u_xlat5.x;\n    u_xlat5.xyz = u_xlat5.xxx * _LightColor0.xyz;\n    u_xlat16_8 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_8 = u_xlat16_8 * u_xlat16_8;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_8;\n    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat16 = max(u_xlat16, 0.00100000005);\n    u_xlat16 = inversesqrt(u_xlat16);\n    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;\n    u_xlat1.x = dot(_WorldSpaceLightPos0.xyz, u_xlat1.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat16_8 = u_xlat1.x + u_xlat1.x;\n    u_xlat16_8 = u_xlat16_8 * u_xlat1.x + -0.5;\n    u_xlat16_13 = (-u_xlat1.x) + 1.0;\n    u_xlat16_3.x = u_xlat16_8 * u_xlat16_3.x + 1.0;\n    u_xlat16_18 = (-u_xlat0.x) + 1.0;\n    u_xlat16_4.x = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_4.x;\n    u_xlat16_8 = u_xlat16_8 * u_xlat16_18 + 1.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_8;\n    u_xlat0.x = u_xlat0.x * u_xlat16_3.x;\n    u_xlat16_3.xyw = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat16_4.x = u_xlat16_13 * u_xlat16_13;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_4.x;\n    u_xlat16_13 = u_xlat16_13 * 0.779083729 + 0.220916301;\n    u_xlat0.xyz = u_xlat5.xyz * vec3(u_xlat16_13);\n    u_xlat10_1.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_4.xyz = u_xlat10_1.xyz * vec3(0.779083729, 0.779083729, 0.779083729);\n    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyw + u_xlat0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"]