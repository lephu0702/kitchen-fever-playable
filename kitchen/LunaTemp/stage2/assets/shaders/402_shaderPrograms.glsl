["#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump float _OutlineWidth;\nattribute highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0.xyz = in_NORMAL0.xyz * vec3(_OutlineWidth) + in_POSITION0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _OutlineColor;\n#define SV_Target0 gl_FragData[0]\nvoid main()\n{\n    SV_Target0 = _OutlineColor;\n    return;\n}\n\n","#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD6;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform lowp sampler2D _MainTex;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nvec3 u_xlat1;\nlowp vec3 u_xlat10_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nlowp vec4 u_xlat10_4;\nvec3 u_xlat5;\nlowp vec4 u_xlat10_5;\nvec3 u_xlat6;\nvec3 u_xlat7;\nbvec3 u_xlatb7;\nvec3 u_xlat8;\nmediump vec3 u_xlat16_8;\nbvec3 u_xlatb9;\nmediump float u_xlat16_10;\nvec3 u_xlat11;\nmediump vec3 u_xlat16_21;\nfloat u_xlat22;\nfloat u_xlat33;\nfloat u_xlat34;\nbool u_xlatb34;\nmediump float u_xlat16_36;\nmediump float u_xlat16_41;\nvoid main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat33 = inversesqrt(u_xlat33);\n    u_xlat1.xyz = vec3(u_xlat33) * u_xlat0.xyz;\n    u_xlat10_2.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_3.x = dot((-u_xlat1.xyz), vs_TEXCOORD1.xyz);\n    u_xlat16_3.x = u_xlat16_3.x + u_xlat16_3.x;\n    u_xlat16_3.xyz = vs_TEXCOORD1.xyz * (-u_xlat16_3.xxx) + (-u_xlat1.xyz);\n    u_xlatb34 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb34){\n        u_xlat34 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n        u_xlat34 = inversesqrt(u_xlat34);\n        u_xlat4.xyz = vec3(u_xlat34) * u_xlat16_3.xyz;\n        u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat5.xyz = u_xlat5.xyz / u_xlat4.xyz;\n        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat6.xyz = u_xlat6.xyz / u_xlat4.xyz;\n        u_xlatb7.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat5;\n            hlslcc_movcTemp.x = (u_xlatb7.x) ? u_xlat5.x : u_xlat6.x;\n            hlslcc_movcTemp.y = (u_xlatb7.y) ? u_xlat5.y : u_xlat6.y;\n            hlslcc_movcTemp.z = (u_xlatb7.z) ? u_xlat5.z : u_xlat6.z;\n            u_xlat5 = hlslcc_movcTemp;\n        }\n        u_xlat34 = min(u_xlat5.y, u_xlat5.x);\n        u_xlat34 = min(u_xlat5.z, u_xlat34);\n        u_xlat5.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat34) + u_xlat5.xyz;\n    } else {\n        u_xlat4.xyz = u_xlat16_3.xyz;\n    }\n    u_xlat10_4 = textureCubeLodEXT(unity_SpecCube0, u_xlat4.xyz, 6.0);\n    u_xlat16_36 = u_xlat10_4.w + -1.0;\n    u_xlat16_36 = unity_SpecCube0_HDR.w * u_xlat16_36 + 1.0;\n    u_xlat16_36 = u_xlat16_36 * unity_SpecCube0_HDR.x;\n    u_xlat16_8.xyz = u_xlat10_4.xyz * vec3(u_xlat16_36);\n    u_xlatb34 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb34){\n        u_xlatb34 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb34){\n            u_xlat34 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n            u_xlat34 = inversesqrt(u_xlat34);\n            u_xlat5.xyz = vec3(u_xlat34) * u_xlat16_3.xyz;\n            u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat6.xyz = u_xlat6.xyz / u_xlat5.xyz;\n            u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat7.xyz = u_xlat7.xyz / u_xlat5.xyz;\n            u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat6;\n                hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat6.x : u_xlat7.x;\n                hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat6.y : u_xlat7.y;\n                hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat6.z : u_xlat7.z;\n                u_xlat6 = hlslcc_movcTemp;\n            }\n            u_xlat34 = min(u_xlat6.y, u_xlat6.x);\n            u_xlat34 = min(u_xlat6.z, u_xlat34);\n            u_xlat6.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat34) + u_xlat6.xyz;\n        } else {\n            u_xlat5.xyz = u_xlat16_3.xyz;\n        }\n        u_xlat10_5 = textureCubeLodEXT(unity_SpecCube1, u_xlat5.xyz, 6.0);\n        u_xlat16_3.x = u_xlat10_5.w + -1.0;\n        u_xlat16_3.x = unity_SpecCube1_HDR.w * u_xlat16_3.x + 1.0;\n        u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube1_HDR.x;\n        u_xlat16_3.xyz = u_xlat10_5.xyz * u_xlat16_3.xxx;\n        u_xlat4.xyz = vec3(u_xlat16_36) * u_xlat10_4.xyz + (-u_xlat16_3.xyz);\n        u_xlat8.xyz = unity_SpecCube0_BoxMin.www * u_xlat4.xyz + u_xlat16_3.xyz;\n        u_xlat16_8.xyz = u_xlat8.xyz;\n    }\n    u_xlat34 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat34 = inversesqrt(u_xlat34);\n    u_xlat4.xyz = vec3(u_xlat34) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = u_xlat10_2.xyz * vec3(0.779083729, 0.779083729, 0.779083729);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat33) + _WorldSpaceLightPos0.xyz;\n    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat33 = max(u_xlat33, 0.00100000005);\n    u_xlat33 = inversesqrt(u_xlat33);\n    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;\n    u_xlat33 = dot(u_xlat4.xyz, u_xlat1.xyz);\n    u_xlat1.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat16_36 = u_xlat0.x + u_xlat0.x;\n    u_xlat16_36 = u_xlat16_36 * u_xlat0.x + -0.5;\n    u_xlat16_41 = (-u_xlat1.x) + 1.0;\n    u_xlat16_10 = u_xlat16_41 * u_xlat16_41;\n    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_41 = u_xlat16_41 * u_xlat16_10;\n    u_xlat16_41 = u_xlat16_36 * u_xlat16_41 + 1.0;\n    u_xlat16_10 = -abs(u_xlat33) + 1.0;\n    u_xlat16_21.x = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_21.x = u_xlat16_21.x * u_xlat16_21.x;\n    u_xlat16_10 = u_xlat16_10 * u_xlat16_21.x;\n    u_xlat16_36 = u_xlat16_36 * u_xlat16_10 + 1.0;\n    u_xlat16_36 = u_xlat16_36 * u_xlat16_41;\n    u_xlat11.x = u_xlat1.x * u_xlat16_36;\n    u_xlat22 = abs(u_xlat33) + u_xlat1.x;\n    u_xlat22 = u_xlat22 + 9.99999975e-06;\n    u_xlat22 = 0.5 / u_xlat22;\n    u_xlat22 = u_xlat22 * 0.999999881;\n    u_xlat22 = max(u_xlat22, 9.99999975e-05);\n    u_xlat22 = sqrt(u_xlat22);\n    u_xlat22 = u_xlat1.x * u_xlat22;\n    u_xlat16_21.xyz = u_xlat11.xxx * _LightColor0.xyz;\n    u_xlat11.xyz = vec3(u_xlat22) * _LightColor0.xyz;\n    u_xlat16_36 = (-u_xlat0.x) + 1.0;\n    u_xlat16_41 = u_xlat16_36 * u_xlat16_36;\n    u_xlat16_41 = u_xlat16_41 * u_xlat16_41;\n    u_xlat16_36 = u_xlat16_36 * u_xlat16_41;\n    u_xlat16_36 = u_xlat16_36 * 0.779083729 + 0.220916301;\n    u_xlat0.xyz = u_xlat11.xyz * vec3(u_xlat16_36);\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_21.xyz + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_8.xyz * vec3(0.720000029, 0.720000029, 0.720000029);\n    u_xlat16_36 = u_xlat16_10 * -2.98023224e-08 + 0.220916301;\n    u_xlat0.xyz = u_xlat16_3.xyz * vec3(u_xlat16_36) + u_xlat0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying mediump vec3 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD6;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz;\n    u_xlat16_2 = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);\n    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);\n    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform lowp sampler2D _MainTex;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying mediump vec3 vs_TEXCOORD3;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nvec3 u_xlat1;\nlowp vec3 u_xlat10_2;\nmediump vec3 u_xlat16_3;\nvec4 u_xlat4;\nmediump vec3 u_xlat16_5;\nlowp vec4 u_xlat10_5;\nvec3 u_xlat6;\nlowp vec4 u_xlat10_6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nbvec3 u_xlatb9;\nvec3 u_xlat10;\nmediump vec3 u_xlat16_10;\nmediump float u_xlat16_11;\nvec3 u_xlat12;\nmediump vec3 u_xlat16_23;\nfloat u_xlat24;\nfloat u_xlat36;\nfloat u_xlat37;\nbool u_xlatb37;\nmediump float u_xlat16_39;\nmediump float u_xlat16_46;\nvoid main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat36 = inversesqrt(u_xlat36);\n    u_xlat1.xyz = vec3(u_xlat36) * u_xlat0.xyz;\n    u_xlat10_2.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_3.x = dot((-u_xlat1.xyz), vs_TEXCOORD1.xyz);\n    u_xlat16_3.x = u_xlat16_3.x + u_xlat16_3.x;\n    u_xlat16_3.xyz = vs_TEXCOORD1.xyz * (-u_xlat16_3.xxx) + (-u_xlat1.xyz);\n    u_xlat4.xyz = vs_TEXCOORD1.xyz;\n    u_xlat4.w = 1.0;\n    u_xlat16_5.x = dot(unity_SHAr, u_xlat4);\n    u_xlat16_5.y = dot(unity_SHAg, u_xlat4);\n    u_xlat16_5.z = dot(unity_SHAb, u_xlat4);\n    u_xlat16_5.xyz = u_xlat16_5.xyz + vs_TEXCOORD3.xyz;\n    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat4.xyz = log2(u_xlat16_5.xyz);\n    u_xlat4.xyz = u_xlat4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat4.xyz = exp2(u_xlat4.xyz);\n    u_xlat4.xyz = u_xlat4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat4.xyz = max(u_xlat4.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb37 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb37){\n        u_xlat37 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n        u_xlat37 = inversesqrt(u_xlat37);\n        u_xlat6.xyz = vec3(u_xlat37) * u_xlat16_3.xyz;\n        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;\n        u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;\n        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat7;\n            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;\n            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;\n            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;\n            u_xlat7 = hlslcc_movcTemp;\n        }\n        u_xlat37 = min(u_xlat7.y, u_xlat7.x);\n        u_xlat37 = min(u_xlat7.z, u_xlat37);\n        u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat37) + u_xlat7.xyz;\n    } else {\n        u_xlat6.xyz = u_xlat16_3.xyz;\n    }\n    u_xlat10_5 = textureCubeLodEXT(unity_SpecCube0, u_xlat6.xyz, 6.0);\n    u_xlat16_39 = u_xlat10_5.w + -1.0;\n    u_xlat16_39 = unity_SpecCube0_HDR.w * u_xlat16_39 + 1.0;\n    u_xlat16_39 = u_xlat16_39 * unity_SpecCube0_HDR.x;\n    u_xlat16_10.xyz = u_xlat10_5.xyz * vec3(u_xlat16_39);\n    u_xlatb37 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb37){\n        u_xlatb37 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb37){\n            u_xlat37 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n            u_xlat37 = inversesqrt(u_xlat37);\n            u_xlat6.xyz = vec3(u_xlat37) * u_xlat16_3.xyz;\n            u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;\n            u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat7;\n                hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;\n                hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;\n                hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;\n                u_xlat7 = hlslcc_movcTemp;\n            }\n            u_xlat37 = min(u_xlat7.y, u_xlat7.x);\n            u_xlat37 = min(u_xlat7.z, u_xlat37);\n            u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat37) + u_xlat7.xyz;\n        } else {\n            u_xlat6.xyz = u_xlat16_3.xyz;\n        }\n        u_xlat10_6 = textureCubeLodEXT(unity_SpecCube1, u_xlat6.xyz, 6.0);\n        u_xlat16_3.x = u_xlat10_6.w + -1.0;\n        u_xlat16_3.x = unity_SpecCube1_HDR.w * u_xlat16_3.x + 1.0;\n        u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube1_HDR.x;\n        u_xlat16_3.xyz = u_xlat10_6.xyz * u_xlat16_3.xxx;\n        u_xlat6.xyz = vec3(u_xlat16_39) * u_xlat10_5.xyz + (-u_xlat16_3.xyz);\n        u_xlat10.xyz = unity_SpecCube0_BoxMin.www * u_xlat6.xyz + u_xlat16_3.xyz;\n        u_xlat16_10.xyz = u_xlat10.xyz;\n    }\n    u_xlat37 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat37 = inversesqrt(u_xlat37);\n    u_xlat6.xyz = vec3(u_xlat37) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = u_xlat10_2.xyz * vec3(0.779083729, 0.779083729, 0.779083729);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat36) + _WorldSpaceLightPos0.xyz;\n    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat36 = max(u_xlat36, 0.00100000005);\n    u_xlat36 = inversesqrt(u_xlat36);\n    u_xlat0.xyz = vec3(u_xlat36) * u_xlat0.xyz;\n    u_xlat36 = dot(u_xlat6.xyz, u_xlat1.xyz);\n    u_xlat1.x = dot(u_xlat6.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat16_39 = u_xlat0.x + u_xlat0.x;\n    u_xlat16_39 = u_xlat16_39 * u_xlat0.x + -0.5;\n    u_xlat16_46 = (-u_xlat1.x) + 1.0;\n    u_xlat16_11 = u_xlat16_46 * u_xlat16_46;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_46 = u_xlat16_46 * u_xlat16_11;\n    u_xlat16_46 = u_xlat16_39 * u_xlat16_46 + 1.0;\n    u_xlat16_11 = -abs(u_xlat36) + 1.0;\n    u_xlat16_23.x = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_23.x = u_xlat16_23.x * u_xlat16_23.x;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_23.x;\n    u_xlat16_39 = u_xlat16_39 * u_xlat16_11 + 1.0;\n    u_xlat16_39 = u_xlat16_39 * u_xlat16_46;\n    u_xlat12.x = u_xlat1.x * u_xlat16_39;\n    u_xlat24 = abs(u_xlat36) + u_xlat1.x;\n    u_xlat24 = u_xlat24 + 9.99999975e-06;\n    u_xlat24 = 0.5 / u_xlat24;\n    u_xlat24 = u_xlat24 * 0.999999881;\n    u_xlat24 = max(u_xlat24, 9.99999975e-05);\n    u_xlat24 = sqrt(u_xlat24);\n    u_xlat24 = u_xlat1.x * u_xlat24;\n    u_xlat16_23.xyz = _LightColor0.xyz * u_xlat12.xxx + u_xlat4.xyz;\n    u_xlat12.xyz = vec3(u_xlat24) * _LightColor0.xyz;\n    u_xlat16_39 = (-u_xlat0.x) + 1.0;\n    u_xlat16_46 = u_xlat16_39 * u_xlat16_39;\n    u_xlat16_46 = u_xlat16_46 * u_xlat16_46;\n    u_xlat16_39 = u_xlat16_39 * u_xlat16_46;\n    u_xlat16_39 = u_xlat16_39 * 0.779083729 + 0.220916301;\n    u_xlat0.xyz = u_xlat12.xyz * vec3(u_xlat16_39);\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_23.xyz + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_10.xyz * vec3(0.720000029, 0.720000029, 0.720000029);\n    u_xlat16_39 = u_xlat16_11 * -2.98023224e-08 + 0.220916301;\n    u_xlat0.xyz = u_xlat16_3.xyz * vec3(u_xlat16_39) + u_xlat0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\nuniform \tvec4 _ProjectionParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD6;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat7;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;\n    gl_Position = u_xlat0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat7 = inversesqrt(u_xlat7);\n    vs_TEXCOORD1.xyz = vec3(u_xlat7) * u_xlat1.xyz;\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    vs_TEXCOORD5.zw = u_xlat0.zw;\n    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;\n    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _ShadowMapTexture;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nvec3 u_xlat1;\nlowp vec3 u_xlat10_2;\nvec3 u_xlat3;\nlowp vec4 u_xlat10_3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nvec3 u_xlat6;\nlowp vec4 u_xlat10_6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nbvec3 u_xlatb8;\nvec3 u_xlat9;\nmediump vec3 u_xlat16_9;\nbvec3 u_xlatb10;\nmediump vec3 u_xlat16_11;\nvec3 u_xlat12;\nmediump vec3 u_xlat16_16;\nfloat u_xlat24;\nfloat u_xlat36;\nfloat u_xlat37;\nbool u_xlatb37;\nfloat u_xlat38;\nlowp float u_xlat10_38;\nmediump float u_xlat16_40;\nmediump float u_xlat16_41;\nmediump float u_xlat16_45;\nvoid main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat36 = inversesqrt(u_xlat36);\n    u_xlat1.xyz = vec3(u_xlat36) * u_xlat0.xyz;\n    u_xlat10_2.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat3.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat3.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat3.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat37 = dot(u_xlat0.xyz, u_xlat3.xyz);\n    u_xlat3.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat38 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat38 = sqrt(u_xlat38);\n    u_xlat38 = (-u_xlat37) + u_xlat38;\n    u_xlat37 = unity_ShadowFadeCenterAndType.w * u_xlat38 + u_xlat37;\n    u_xlat37 = u_xlat37 * _LightShadowData.z + _LightShadowData.w;\n    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);\n    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;\n    u_xlat10_38 = texture2D(_ShadowMapTexture, u_xlat3.xy).x;\n    u_xlat16_4.x = (-u_xlat10_38) + 1.0;\n    u_xlat16_4.x = u_xlat37 * u_xlat16_4.x + u_xlat10_38;\n    u_xlat16_16.x = dot((-u_xlat1.xyz), vs_TEXCOORD1.xyz);\n    u_xlat16_16.x = u_xlat16_16.x + u_xlat16_16.x;\n    u_xlat16_16.xyz = vs_TEXCOORD1.xyz * (-u_xlat16_16.xxx) + (-u_xlat1.xyz);\n    u_xlat16_5.xyz = u_xlat16_4.xxx * _LightColor0.xyz;\n    u_xlatb37 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb37){\n        u_xlat37 = dot(u_xlat16_16.xyz, u_xlat16_16.xyz);\n        u_xlat37 = inversesqrt(u_xlat37);\n        u_xlat3.xyz = vec3(u_xlat37) * u_xlat16_16.xyz;\n        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat6.xyz = u_xlat6.xyz / u_xlat3.xyz;\n        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat7.xyz = u_xlat7.xyz / u_xlat3.xyz;\n        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat3.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat6;\n            hlslcc_movcTemp.x = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;\n            hlslcc_movcTemp.y = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;\n            hlslcc_movcTemp.z = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;\n            u_xlat6 = hlslcc_movcTemp;\n        }\n        u_xlat37 = min(u_xlat6.y, u_xlat6.x);\n        u_xlat37 = min(u_xlat6.z, u_xlat37);\n        u_xlat6.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat37) + u_xlat6.xyz;\n    } else {\n        u_xlat3.xyz = u_xlat16_16.xyz;\n    }\n    u_xlat10_3 = textureCubeLodEXT(unity_SpecCube0, u_xlat3.xyz, 6.0);\n    u_xlat16_4.x = u_xlat10_3.w + -1.0;\n    u_xlat16_4.x = unity_SpecCube0_HDR.w * u_xlat16_4.x + 1.0;\n    u_xlat16_4.x = u_xlat16_4.x * unity_SpecCube0_HDR.x;\n    u_xlat16_9.xyz = u_xlat10_3.xyz * u_xlat16_4.xxx;\n    u_xlatb37 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb37){\n        u_xlatb37 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb37){\n            u_xlat37 = dot(u_xlat16_16.xyz, u_xlat16_16.xyz);\n            u_xlat37 = inversesqrt(u_xlat37);\n            u_xlat6.xyz = vec3(u_xlat37) * u_xlat16_16.xyz;\n            u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat7;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat7.x : u_xlat8.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat7.y : u_xlat8.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat7.z : u_xlat8.z;\n                u_xlat7 = hlslcc_movcTemp;\n            }\n            u_xlat37 = min(u_xlat7.y, u_xlat7.x);\n            u_xlat37 = min(u_xlat7.z, u_xlat37);\n            u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat37) + u_xlat7.xyz;\n        } else {\n            u_xlat6.xyz = u_xlat16_16.xyz;\n        }\n        u_xlat10_6 = textureCubeLodEXT(unity_SpecCube1, u_xlat6.xyz, 6.0);\n        u_xlat16_16.x = u_xlat10_6.w + -1.0;\n        u_xlat16_16.x = unity_SpecCube1_HDR.w * u_xlat16_16.x + 1.0;\n        u_xlat16_16.x = u_xlat16_16.x * unity_SpecCube1_HDR.x;\n        u_xlat16_16.xyz = u_xlat10_6.xyz * u_xlat16_16.xxx;\n        u_xlat3.xyz = u_xlat16_4.xxx * u_xlat10_3.xyz + (-u_xlat16_16.xyz);\n        u_xlat9.xyz = unity_SpecCube0_BoxMin.www * u_xlat3.xyz + u_xlat16_16.xyz;\n        u_xlat16_9.xyz = u_xlat9.xyz;\n    }\n    u_xlat37 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat37 = inversesqrt(u_xlat37);\n    u_xlat3.xyz = vec3(u_xlat37) * vs_TEXCOORD1.xyz;\n    u_xlat16_4.xyz = u_xlat10_2.xyz * vec3(0.779083729, 0.779083729, 0.779083729);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat36) + _WorldSpaceLightPos0.xyz;\n    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat36 = max(u_xlat36, 0.00100000005);\n    u_xlat36 = inversesqrt(u_xlat36);\n    u_xlat0.xyz = vec3(u_xlat36) * u_xlat0.xyz;\n    u_xlat36 = dot(u_xlat3.xyz, u_xlat1.xyz);\n    u_xlat1.x = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat16_40 = u_xlat0.x + u_xlat0.x;\n    u_xlat16_40 = u_xlat16_40 * u_xlat0.x + -0.5;\n    u_xlat16_41 = (-u_xlat1.x) + 1.0;\n    u_xlat16_45 = u_xlat16_41 * u_xlat16_41;\n    u_xlat16_45 = u_xlat16_45 * u_xlat16_45;\n    u_xlat16_41 = u_xlat16_41 * u_xlat16_45;\n    u_xlat16_41 = u_xlat16_40 * u_xlat16_41 + 1.0;\n    u_xlat16_45 = -abs(u_xlat36) + 1.0;\n    u_xlat16_11.x = u_xlat16_45 * u_xlat16_45;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_45 = u_xlat16_45 * u_xlat16_11.x;\n    u_xlat16_40 = u_xlat16_40 * u_xlat16_45 + 1.0;\n    u_xlat16_40 = u_xlat16_40 * u_xlat16_41;\n    u_xlat12.x = u_xlat1.x * u_xlat16_40;\n    u_xlat24 = abs(u_xlat36) + u_xlat1.x;\n    u_xlat24 = u_xlat24 + 9.99999975e-06;\n    u_xlat24 = 0.5 / u_xlat24;\n    u_xlat24 = u_xlat24 * 0.999999881;\n    u_xlat24 = max(u_xlat24, 9.99999975e-05);\n    u_xlat24 = sqrt(u_xlat24);\n    u_xlat24 = u_xlat1.x * u_xlat24;\n    u_xlat16_11.xyz = u_xlat12.xxx * u_xlat16_5.xyz;\n    u_xlat12.xyz = u_xlat16_5.xyz * vec3(u_xlat24);\n    u_xlat16_40 = (-u_xlat0.x) + 1.0;\n    u_xlat16_5.x = u_xlat16_40 * u_xlat16_40;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_40 = u_xlat16_40 * u_xlat16_5.x;\n    u_xlat16_40 = u_xlat16_40 * 0.779083729 + 0.220916301;\n    u_xlat0.xyz = u_xlat12.xyz * vec3(u_xlat16_40);\n    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_11.xyz + u_xlat0.xyz;\n    u_xlat16_4.xyz = u_xlat16_9.xyz * vec3(0.720000029, 0.720000029, 0.720000029);\n    u_xlat16_40 = u_xlat16_45 * -2.98023224e-08 + 0.220916301;\n    u_xlat0.xyz = u_xlat16_4.xyz * vec3(u_xlat16_40) + u_xlat0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD6;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform lowp sampler2D _MainTex;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nvec3 u_xlat1;\nlowp vec3 u_xlat10_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nlowp vec4 u_xlat10_4;\nvec3 u_xlat5;\nlowp vec4 u_xlat10_5;\nvec3 u_xlat6;\nvec3 u_xlat7;\nbvec3 u_xlatb7;\nvec3 u_xlat8;\nmediump vec3 u_xlat16_8;\nbvec3 u_xlatb9;\nmediump float u_xlat16_10;\nvec3 u_xlat11;\nmediump vec3 u_xlat16_21;\nfloat u_xlat22;\nfloat u_xlat33;\nfloat u_xlat34;\nbool u_xlatb34;\nmediump float u_xlat16_36;\nmediump float u_xlat16_41;\nvoid main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat33 = inversesqrt(u_xlat33);\n    u_xlat1.xyz = vec3(u_xlat33) * u_xlat0.xyz;\n    u_xlat10_2.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_3.x = dot((-u_xlat1.xyz), vs_TEXCOORD1.xyz);\n    u_xlat16_3.x = u_xlat16_3.x + u_xlat16_3.x;\n    u_xlat16_3.xyz = vs_TEXCOORD1.xyz * (-u_xlat16_3.xxx) + (-u_xlat1.xyz);\n    u_xlatb34 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb34){\n        u_xlat34 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n        u_xlat34 = inversesqrt(u_xlat34);\n        u_xlat4.xyz = vec3(u_xlat34) * u_xlat16_3.xyz;\n        u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat5.xyz = u_xlat5.xyz / u_xlat4.xyz;\n        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat6.xyz = u_xlat6.xyz / u_xlat4.xyz;\n        u_xlatb7.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat5;\n            hlslcc_movcTemp.x = (u_xlatb7.x) ? u_xlat5.x : u_xlat6.x;\n            hlslcc_movcTemp.y = (u_xlatb7.y) ? u_xlat5.y : u_xlat6.y;\n            hlslcc_movcTemp.z = (u_xlatb7.z) ? u_xlat5.z : u_xlat6.z;\n            u_xlat5 = hlslcc_movcTemp;\n        }\n        u_xlat34 = min(u_xlat5.y, u_xlat5.x);\n        u_xlat34 = min(u_xlat5.z, u_xlat34);\n        u_xlat5.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat34) + u_xlat5.xyz;\n    } else {\n        u_xlat4.xyz = u_xlat16_3.xyz;\n    }\n    u_xlat10_4 = textureCubeLodEXT(unity_SpecCube0, u_xlat4.xyz, 6.0);\n    u_xlat16_36 = u_xlat10_4.w + -1.0;\n    u_xlat16_36 = unity_SpecCube0_HDR.w * u_xlat16_36 + 1.0;\n    u_xlat16_36 = u_xlat16_36 * unity_SpecCube0_HDR.x;\n    u_xlat16_8.xyz = u_xlat10_4.xyz * vec3(u_xlat16_36);\n    u_xlatb34 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb34){\n        u_xlatb34 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb34){\n            u_xlat34 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n            u_xlat34 = inversesqrt(u_xlat34);\n            u_xlat5.xyz = vec3(u_xlat34) * u_xlat16_3.xyz;\n            u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat6.xyz = u_xlat6.xyz / u_xlat5.xyz;\n            u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat7.xyz = u_xlat7.xyz / u_xlat5.xyz;\n            u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat6;\n                hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat6.x : u_xlat7.x;\n                hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat6.y : u_xlat7.y;\n                hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat6.z : u_xlat7.z;\n                u_xlat6 = hlslcc_movcTemp;\n            }\n            u_xlat34 = min(u_xlat6.y, u_xlat6.x);\n            u_xlat34 = min(u_xlat6.z, u_xlat34);\n            u_xlat6.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat34) + u_xlat6.xyz;\n        } else {\n            u_xlat5.xyz = u_xlat16_3.xyz;\n        }\n        u_xlat10_5 = textureCubeLodEXT(unity_SpecCube1, u_xlat5.xyz, 6.0);\n        u_xlat16_3.x = u_xlat10_5.w + -1.0;\n        u_xlat16_3.x = unity_SpecCube1_HDR.w * u_xlat16_3.x + 1.0;\n        u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube1_HDR.x;\n        u_xlat16_3.xyz = u_xlat10_5.xyz * u_xlat16_3.xxx;\n        u_xlat4.xyz = vec3(u_xlat16_36) * u_xlat10_4.xyz + (-u_xlat16_3.xyz);\n        u_xlat8.xyz = unity_SpecCube0_BoxMin.www * u_xlat4.xyz + u_xlat16_3.xyz;\n        u_xlat16_8.xyz = u_xlat8.xyz;\n    }\n    u_xlat34 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat34 = inversesqrt(u_xlat34);\n    u_xlat4.xyz = vec3(u_xlat34) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = u_xlat10_2.xyz * vec3(0.779083729, 0.779083729, 0.779083729);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat33) + _WorldSpaceLightPos0.xyz;\n    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat33 = max(u_xlat33, 0.00100000005);\n    u_xlat33 = inversesqrt(u_xlat33);\n    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;\n    u_xlat33 = dot(u_xlat4.xyz, u_xlat1.xyz);\n    u_xlat1.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat16_36 = u_xlat0.x + u_xlat0.x;\n    u_xlat16_36 = u_xlat16_36 * u_xlat0.x + -0.5;\n    u_xlat16_41 = (-u_xlat1.x) + 1.0;\n    u_xlat16_10 = u_xlat16_41 * u_xlat16_41;\n    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_41 = u_xlat16_41 * u_xlat16_10;\n    u_xlat16_41 = u_xlat16_36 * u_xlat16_41 + 1.0;\n    u_xlat16_10 = -abs(u_xlat33) + 1.0;\n    u_xlat16_21.x = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_21.x = u_xlat16_21.x * u_xlat16_21.x;\n    u_xlat16_10 = u_xlat16_10 * u_xlat16_21.x;\n    u_xlat16_36 = u_xlat16_36 * u_xlat16_10 + 1.0;\n    u_xlat16_36 = u_xlat16_36 * u_xlat16_41;\n    u_xlat11.x = u_xlat1.x * u_xlat16_36;\n    u_xlat22 = abs(u_xlat33) + u_xlat1.x;\n    u_xlat22 = u_xlat22 + 9.99999975e-06;\n    u_xlat22 = 0.5 / u_xlat22;\n    u_xlat22 = u_xlat22 * 0.999999881;\n    u_xlat22 = max(u_xlat22, 9.99999975e-05);\n    u_xlat22 = sqrt(u_xlat22);\n    u_xlat22 = u_xlat1.x * u_xlat22;\n    u_xlat16_21.xyz = u_xlat11.xxx * _LightColor0.xyz;\n    u_xlat11.xyz = vec3(u_xlat22) * _LightColor0.xyz;\n    u_xlat16_36 = (-u_xlat0.x) + 1.0;\n    u_xlat16_41 = u_xlat16_36 * u_xlat16_36;\n    u_xlat16_41 = u_xlat16_41 * u_xlat16_41;\n    u_xlat16_36 = u_xlat16_36 * u_xlat16_41;\n    u_xlat16_36 = u_xlat16_36 * 0.779083729 + 0.220916301;\n    u_xlat0.xyz = u_xlat11.xyz * vec3(u_xlat16_36);\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_21.xyz + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_8.xyz * vec3(0.720000029, 0.720000029, 0.720000029);\n    u_xlat16_36 = u_xlat16_10 * -2.98023224e-08 + 0.220916301;\n    u_xlat0.xyz = u_xlat16_3.xyz * vec3(u_xlat16_36) + u_xlat0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\nuniform \tvec4 _ProjectionParams;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying mediump vec3 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD6;\nvec4 u_xlat0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nmediump float u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec4 u_xlat4;\nfloat u_xlat16;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;\n    gl_Position = u_xlat0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat16 = inversesqrt(u_xlat16);\n    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;\n    vs_TEXCOORD1.xyz = u_xlat1.xyz;\n    u_xlat16_2 = u_xlat1.y * u_xlat1.y;\n    u_xlat16_2 = u_xlat1.x * u_xlat1.x + (-u_xlat16_2);\n    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);\n    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n    u_xlat4.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    vs_TEXCOORD5.zw = u_xlat0.zw;\n    vs_TEXCOORD5.xy = u_xlat4.zz + u_xlat4.xw;\n    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _ShadowMapTexture;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying mediump vec3 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nvec3 u_xlat1;\nlowp vec3 u_xlat10_2;\nvec4 u_xlat3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nlowp vec4 u_xlat10_6;\nvec3 u_xlat7;\nlowp vec4 u_xlat10_7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbvec3 u_xlatb10;\nvec3 u_xlat11;\nmediump vec3 u_xlat16_11;\nmediump vec3 u_xlat16_12;\nvec3 u_xlat13;\nmediump vec3 u_xlat16_17;\nfloat u_xlat26;\nfloat u_xlat39;\nfloat u_xlat40;\nbool u_xlatb40;\nfloat u_xlat41;\nlowp float u_xlat10_41;\nmediump float u_xlat16_43;\nmediump float u_xlat16_44;\nmediump float u_xlat16_50;\nvoid main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat39 = inversesqrt(u_xlat39);\n    u_xlat1.xyz = vec3(u_xlat39) * u_xlat0.xyz;\n    u_xlat10_2.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat3.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat3.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat3.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat40 = dot(u_xlat0.xyz, u_xlat3.xyz);\n    u_xlat3.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat41 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat41 = sqrt(u_xlat41);\n    u_xlat41 = (-u_xlat40) + u_xlat41;\n    u_xlat40 = unity_ShadowFadeCenterAndType.w * u_xlat41 + u_xlat40;\n    u_xlat40 = u_xlat40 * _LightShadowData.z + _LightShadowData.w;\n    u_xlat40 = clamp(u_xlat40, 0.0, 1.0);\n    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;\n    u_xlat10_41 = texture2D(_ShadowMapTexture, u_xlat3.xy).x;\n    u_xlat16_4.x = (-u_xlat10_41) + 1.0;\n    u_xlat16_4.x = u_xlat40 * u_xlat16_4.x + u_xlat10_41;\n    u_xlat16_17.x = dot((-u_xlat1.xyz), vs_TEXCOORD1.xyz);\n    u_xlat16_17.x = u_xlat16_17.x + u_xlat16_17.x;\n    u_xlat16_17.xyz = vs_TEXCOORD1.xyz * (-u_xlat16_17.xxx) + (-u_xlat1.xyz);\n    u_xlat16_5.xyz = u_xlat16_4.xxx * _LightColor0.xyz;\n    u_xlat3.xyz = vs_TEXCOORD1.xyz;\n    u_xlat3.w = 1.0;\n    u_xlat16_6.x = dot(unity_SHAr, u_xlat3);\n    u_xlat16_6.y = dot(unity_SHAg, u_xlat3);\n    u_xlat16_6.z = dot(unity_SHAb, u_xlat3);\n    u_xlat16_6.xyz = u_xlat16_6.xyz + vs_TEXCOORD3.xyz;\n    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat3.xyz = log2(u_xlat16_6.xyz);\n    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat3.xyz = exp2(u_xlat3.xyz);\n    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb40 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb40){\n        u_xlat40 = dot(u_xlat16_17.xyz, u_xlat16_17.xyz);\n        u_xlat40 = inversesqrt(u_xlat40);\n        u_xlat7.xyz = vec3(u_xlat40) * u_xlat16_17.xyz;\n        u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n        u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat8;\n            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n            u_xlat8 = hlslcc_movcTemp;\n        }\n        u_xlat40 = min(u_xlat8.y, u_xlat8.x);\n        u_xlat40 = min(u_xlat8.z, u_xlat40);\n        u_xlat8.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat40) + u_xlat8.xyz;\n    } else {\n        u_xlat7.xyz = u_xlat16_17.xyz;\n    }\n    u_xlat10_6 = textureCubeLodEXT(unity_SpecCube0, u_xlat7.xyz, 6.0);\n    u_xlat16_4.x = u_xlat10_6.w + -1.0;\n    u_xlat16_4.x = unity_SpecCube0_HDR.w * u_xlat16_4.x + 1.0;\n    u_xlat16_4.x = u_xlat16_4.x * unity_SpecCube0_HDR.x;\n    u_xlat16_11.xyz = u_xlat10_6.xyz * u_xlat16_4.xxx;\n    u_xlatb40 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb40){\n        u_xlatb40 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb40){\n            u_xlat40 = dot(u_xlat16_17.xyz, u_xlat16_17.xyz);\n            u_xlat40 = inversesqrt(u_xlat40);\n            u_xlat7.xyz = vec3(u_xlat40) * u_xlat16_17.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat8;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n                u_xlat8 = hlslcc_movcTemp;\n            }\n            u_xlat40 = min(u_xlat8.y, u_xlat8.x);\n            u_xlat40 = min(u_xlat8.z, u_xlat40);\n            u_xlat8.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat40) + u_xlat8.xyz;\n        } else {\n            u_xlat7.xyz = u_xlat16_17.xyz;\n        }\n        u_xlat10_7 = textureCubeLodEXT(unity_SpecCube1, u_xlat7.xyz, 6.0);\n        u_xlat16_17.x = u_xlat10_7.w + -1.0;\n        u_xlat16_17.x = unity_SpecCube1_HDR.w * u_xlat16_17.x + 1.0;\n        u_xlat16_17.x = u_xlat16_17.x * unity_SpecCube1_HDR.x;\n        u_xlat16_17.xyz = u_xlat10_7.xyz * u_xlat16_17.xxx;\n        u_xlat7.xyz = u_xlat16_4.xxx * u_xlat10_6.xyz + (-u_xlat16_17.xyz);\n        u_xlat11.xyz = unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat16_17.xyz;\n        u_xlat16_11.xyz = u_xlat11.xyz;\n    }\n    u_xlat40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat40 = inversesqrt(u_xlat40);\n    u_xlat7.xyz = vec3(u_xlat40) * vs_TEXCOORD1.xyz;\n    u_xlat16_4.xyz = u_xlat10_2.xyz * vec3(0.779083729, 0.779083729, 0.779083729);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat39) + _WorldSpaceLightPos0.xyz;\n    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat39 = max(u_xlat39, 0.00100000005);\n    u_xlat39 = inversesqrt(u_xlat39);\n    u_xlat0.xyz = vec3(u_xlat39) * u_xlat0.xyz;\n    u_xlat39 = dot(u_xlat7.xyz, u_xlat1.xyz);\n    u_xlat1.x = dot(u_xlat7.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat16_43 = u_xlat0.x + u_xlat0.x;\n    u_xlat16_43 = u_xlat16_43 * u_xlat0.x + -0.5;\n    u_xlat16_44 = (-u_xlat1.x) + 1.0;\n    u_xlat16_50 = u_xlat16_44 * u_xlat16_44;\n    u_xlat16_50 = u_xlat16_50 * u_xlat16_50;\n    u_xlat16_44 = u_xlat16_44 * u_xlat16_50;\n    u_xlat16_44 = u_xlat16_43 * u_xlat16_44 + 1.0;\n    u_xlat16_50 = -abs(u_xlat39) + 1.0;\n    u_xlat16_12.x = u_xlat16_50 * u_xlat16_50;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_12.x;\n    u_xlat16_50 = u_xlat16_50 * u_xlat16_12.x;\n    u_xlat16_43 = u_xlat16_43 * u_xlat16_50 + 1.0;\n    u_xlat16_43 = u_xlat16_43 * u_xlat16_44;\n    u_xlat13.x = u_xlat1.x * u_xlat16_43;\n    u_xlat26 = abs(u_xlat39) + u_xlat1.x;\n    u_xlat26 = u_xlat26 + 9.99999975e-06;\n    u_xlat26 = 0.5 / u_xlat26;\n    u_xlat26 = u_xlat26 * 0.999999881;\n    u_xlat26 = max(u_xlat26, 9.99999975e-05);\n    u_xlat26 = sqrt(u_xlat26);\n    u_xlat26 = u_xlat1.x * u_xlat26;\n    u_xlat16_12.xyz = u_xlat16_5.xyz * u_xlat13.xxx + u_xlat3.xyz;\n    u_xlat13.xyz = u_xlat16_5.xyz * vec3(u_xlat26);\n    u_xlat16_43 = (-u_xlat0.x) + 1.0;\n    u_xlat16_5.x = u_xlat16_43 * u_xlat16_43;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_43 = u_xlat16_43 * u_xlat16_5.x;\n    u_xlat16_43 = u_xlat16_43 * 0.779083729 + 0.220916301;\n    u_xlat0.xyz = u_xlat13.xyz * vec3(u_xlat16_43);\n    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_12.xyz + u_xlat0.xyz;\n    u_xlat16_4.xyz = u_xlat16_11.xyz * vec3(0.720000029, 0.720000029, 0.720000029);\n    u_xlat16_43 = u_xlat16_50 * -2.98023224e-08 + 0.220916301;\n    u_xlat0.xyz = u_xlat16_4.xyz * vec3(u_xlat16_43) + u_xlat0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\nuniform \tvec4 unity_4LightPosX0;\nuniform \tvec4 unity_4LightPosY0;\nuniform \tvec4 unity_4LightPosZ0;\nuniform \tmediump vec4 unity_4LightAtten0;\nuniform \tmediump vec4 unity_LightColor[8];\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying mediump vec3 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD6;\nvec4 u_xlat0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nvec4 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nfloat u_xlat21;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;\n    vs_TEXCOORD1.xyz = u_xlat1.xyz;\n    vs_TEXCOORD2.xyz = u_xlat0.xyz;\n    u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;\n    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;\n    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;\n    u_xlat4 = u_xlat1.yyyy * u_xlat3;\n    u_xlat3 = u_xlat3 * u_xlat3;\n    u_xlat3 = u_xlat2 * u_xlat2 + u_xlat3;\n    u_xlat2 = u_xlat2 * u_xlat1.xxxx + u_xlat4;\n    u_xlat2 = u_xlat0 * u_xlat1.zzzz + u_xlat2;\n    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;\n    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));\n    u_xlat3 = inversesqrt(u_xlat0);\n    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);\n    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;\n    u_xlat2 = u_xlat2 * u_xlat3;\n    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));\n    u_xlat0 = u_xlat0 * u_xlat2;\n    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;\n    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;\n    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;\n    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;\n    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);\n    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);\n    u_xlat16_5.x = u_xlat1.y * u_xlat1.y;\n    u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);\n    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;\n    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_1);\n    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_1);\n    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_1);\n    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;\n    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat16_5.xyz;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform lowp sampler2D _MainTex;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying mediump vec3 vs_TEXCOORD3;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nvec3 u_xlat1;\nlowp vec3 u_xlat10_2;\nmediump vec3 u_xlat16_3;\nvec4 u_xlat4;\nmediump vec3 u_xlat16_5;\nlowp vec4 u_xlat10_5;\nvec3 u_xlat6;\nlowp vec4 u_xlat10_6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nbvec3 u_xlatb9;\nvec3 u_xlat10;\nmediump vec3 u_xlat16_10;\nmediump float u_xlat16_11;\nvec3 u_xlat12;\nmediump vec3 u_xlat16_23;\nfloat u_xlat24;\nfloat u_xlat36;\nfloat u_xlat37;\nbool u_xlatb37;\nmediump float u_xlat16_39;\nmediump float u_xlat16_46;\nvoid main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat36 = inversesqrt(u_xlat36);\n    u_xlat1.xyz = vec3(u_xlat36) * u_xlat0.xyz;\n    u_xlat10_2.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_3.x = dot((-u_xlat1.xyz), vs_TEXCOORD1.xyz);\n    u_xlat16_3.x = u_xlat16_3.x + u_xlat16_3.x;\n    u_xlat16_3.xyz = vs_TEXCOORD1.xyz * (-u_xlat16_3.xxx) + (-u_xlat1.xyz);\n    u_xlat4.xyz = vs_TEXCOORD1.xyz;\n    u_xlat4.w = 1.0;\n    u_xlat16_5.x = dot(unity_SHAr, u_xlat4);\n    u_xlat16_5.y = dot(unity_SHAg, u_xlat4);\n    u_xlat16_5.z = dot(unity_SHAb, u_xlat4);\n    u_xlat16_5.xyz = u_xlat16_5.xyz + vs_TEXCOORD3.xyz;\n    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat4.xyz = log2(u_xlat16_5.xyz);\n    u_xlat4.xyz = u_xlat4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat4.xyz = exp2(u_xlat4.xyz);\n    u_xlat4.xyz = u_xlat4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat4.xyz = max(u_xlat4.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb37 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb37){\n        u_xlat37 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n        u_xlat37 = inversesqrt(u_xlat37);\n        u_xlat6.xyz = vec3(u_xlat37) * u_xlat16_3.xyz;\n        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;\n        u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;\n        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat7;\n            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;\n            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;\n            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;\n            u_xlat7 = hlslcc_movcTemp;\n        }\n        u_xlat37 = min(u_xlat7.y, u_xlat7.x);\n        u_xlat37 = min(u_xlat7.z, u_xlat37);\n        u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat37) + u_xlat7.xyz;\n    } else {\n        u_xlat6.xyz = u_xlat16_3.xyz;\n    }\n    u_xlat10_5 = textureCubeLodEXT(unity_SpecCube0, u_xlat6.xyz, 6.0);\n    u_xlat16_39 = u_xlat10_5.w + -1.0;\n    u_xlat16_39 = unity_SpecCube0_HDR.w * u_xlat16_39 + 1.0;\n    u_xlat16_39 = u_xlat16_39 * unity_SpecCube0_HDR.x;\n    u_xlat16_10.xyz = u_xlat10_5.xyz * vec3(u_xlat16_39);\n    u_xlatb37 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb37){\n        u_xlatb37 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb37){\n            u_xlat37 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n            u_xlat37 = inversesqrt(u_xlat37);\n            u_xlat6.xyz = vec3(u_xlat37) * u_xlat16_3.xyz;\n            u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;\n            u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat7;\n                hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;\n                hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;\n                hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;\n                u_xlat7 = hlslcc_movcTemp;\n            }\n            u_xlat37 = min(u_xlat7.y, u_xlat7.x);\n            u_xlat37 = min(u_xlat7.z, u_xlat37);\n            u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat37) + u_xlat7.xyz;\n        } else {\n            u_xlat6.xyz = u_xlat16_3.xyz;\n        }\n        u_xlat10_6 = textureCubeLodEXT(unity_SpecCube1, u_xlat6.xyz, 6.0);\n        u_xlat16_3.x = u_xlat10_6.w + -1.0;\n        u_xlat16_3.x = unity_SpecCube1_HDR.w * u_xlat16_3.x + 1.0;\n        u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube1_HDR.x;\n        u_xlat16_3.xyz = u_xlat10_6.xyz * u_xlat16_3.xxx;\n        u_xlat6.xyz = vec3(u_xlat16_39) * u_xlat10_5.xyz + (-u_xlat16_3.xyz);\n        u_xlat10.xyz = unity_SpecCube0_BoxMin.www * u_xlat6.xyz + u_xlat16_3.xyz;\n        u_xlat16_10.xyz = u_xlat10.xyz;\n    }\n    u_xlat37 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat37 = inversesqrt(u_xlat37);\n    u_xlat6.xyz = vec3(u_xlat37) * vs_TEXCOORD1.xyz;\n    u_xlat16_3.xyz = u_xlat10_2.xyz * vec3(0.779083729, 0.779083729, 0.779083729);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat36) + _WorldSpaceLightPos0.xyz;\n    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat36 = max(u_xlat36, 0.00100000005);\n    u_xlat36 = inversesqrt(u_xlat36);\n    u_xlat0.xyz = vec3(u_xlat36) * u_xlat0.xyz;\n    u_xlat36 = dot(u_xlat6.xyz, u_xlat1.xyz);\n    u_xlat1.x = dot(u_xlat6.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat16_39 = u_xlat0.x + u_xlat0.x;\n    u_xlat16_39 = u_xlat16_39 * u_xlat0.x + -0.5;\n    u_xlat16_46 = (-u_xlat1.x) + 1.0;\n    u_xlat16_11 = u_xlat16_46 * u_xlat16_46;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_46 = u_xlat16_46 * u_xlat16_11;\n    u_xlat16_46 = u_xlat16_39 * u_xlat16_46 + 1.0;\n    u_xlat16_11 = -abs(u_xlat36) + 1.0;\n    u_xlat16_23.x = u_xlat16_11 * u_xlat16_11;\n    u_xlat16_23.x = u_xlat16_23.x * u_xlat16_23.x;\n    u_xlat16_11 = u_xlat16_11 * u_xlat16_23.x;\n    u_xlat16_39 = u_xlat16_39 * u_xlat16_11 + 1.0;\n    u_xlat16_39 = u_xlat16_39 * u_xlat16_46;\n    u_xlat12.x = u_xlat1.x * u_xlat16_39;\n    u_xlat24 = abs(u_xlat36) + u_xlat1.x;\n    u_xlat24 = u_xlat24 + 9.99999975e-06;\n    u_xlat24 = 0.5 / u_xlat24;\n    u_xlat24 = u_xlat24 * 0.999999881;\n    u_xlat24 = max(u_xlat24, 9.99999975e-05);\n    u_xlat24 = sqrt(u_xlat24);\n    u_xlat24 = u_xlat1.x * u_xlat24;\n    u_xlat16_23.xyz = _LightColor0.xyz * u_xlat12.xxx + u_xlat4.xyz;\n    u_xlat12.xyz = vec3(u_xlat24) * _LightColor0.xyz;\n    u_xlat16_39 = (-u_xlat0.x) + 1.0;\n    u_xlat16_46 = u_xlat16_39 * u_xlat16_39;\n    u_xlat16_46 = u_xlat16_46 * u_xlat16_46;\n    u_xlat16_39 = u_xlat16_39 * u_xlat16_46;\n    u_xlat16_39 = u_xlat16_39 * 0.779083729 + 0.220916301;\n    u_xlat0.xyz = u_xlat12.xyz * vec3(u_xlat16_39);\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_23.xyz + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_10.xyz * vec3(0.720000029, 0.720000029, 0.720000029);\n    u_xlat16_39 = u_xlat16_11 * -2.98023224e-08 + 0.220916301;\n    u_xlat0.xyz = u_xlat16_3.xyz * vec3(u_xlat16_39) + u_xlat0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\nuniform \tvec4 _ProjectionParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD6;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat7;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;\n    gl_Position = u_xlat0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat7 = inversesqrt(u_xlat7);\n    vs_TEXCOORD1.xyz = vec3(u_xlat7) * u_xlat1.xyz;\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    vs_TEXCOORD5.zw = u_xlat0.zw;\n    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;\n    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _ShadowMapTexture;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nvec3 u_xlat1;\nlowp vec3 u_xlat10_2;\nvec3 u_xlat3;\nlowp vec4 u_xlat10_3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nvec3 u_xlat6;\nlowp vec4 u_xlat10_6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nbvec3 u_xlatb8;\nvec3 u_xlat9;\nmediump vec3 u_xlat16_9;\nbvec3 u_xlatb10;\nmediump vec3 u_xlat16_11;\nvec3 u_xlat12;\nmediump vec3 u_xlat16_16;\nfloat u_xlat24;\nfloat u_xlat36;\nfloat u_xlat37;\nbool u_xlatb37;\nfloat u_xlat38;\nlowp float u_xlat10_38;\nmediump float u_xlat16_40;\nmediump float u_xlat16_41;\nmediump float u_xlat16_45;\nvoid main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat36 = inversesqrt(u_xlat36);\n    u_xlat1.xyz = vec3(u_xlat36) * u_xlat0.xyz;\n    u_xlat10_2.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat3.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat3.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat3.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat37 = dot(u_xlat0.xyz, u_xlat3.xyz);\n    u_xlat3.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat38 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat38 = sqrt(u_xlat38);\n    u_xlat38 = (-u_xlat37) + u_xlat38;\n    u_xlat37 = unity_ShadowFadeCenterAndType.w * u_xlat38 + u_xlat37;\n    u_xlat37 = u_xlat37 * _LightShadowData.z + _LightShadowData.w;\n    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);\n    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;\n    u_xlat10_38 = texture2D(_ShadowMapTexture, u_xlat3.xy).x;\n    u_xlat16_4.x = (-u_xlat10_38) + 1.0;\n    u_xlat16_4.x = u_xlat37 * u_xlat16_4.x + u_xlat10_38;\n    u_xlat16_16.x = dot((-u_xlat1.xyz), vs_TEXCOORD1.xyz);\n    u_xlat16_16.x = u_xlat16_16.x + u_xlat16_16.x;\n    u_xlat16_16.xyz = vs_TEXCOORD1.xyz * (-u_xlat16_16.xxx) + (-u_xlat1.xyz);\n    u_xlat16_5.xyz = u_xlat16_4.xxx * _LightColor0.xyz;\n    u_xlatb37 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb37){\n        u_xlat37 = dot(u_xlat16_16.xyz, u_xlat16_16.xyz);\n        u_xlat37 = inversesqrt(u_xlat37);\n        u_xlat3.xyz = vec3(u_xlat37) * u_xlat16_16.xyz;\n        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat6.xyz = u_xlat6.xyz / u_xlat3.xyz;\n        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat7.xyz = u_xlat7.xyz / u_xlat3.xyz;\n        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat3.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat6;\n            hlslcc_movcTemp.x = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;\n            hlslcc_movcTemp.y = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;\n            hlslcc_movcTemp.z = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;\n            u_xlat6 = hlslcc_movcTemp;\n        }\n        u_xlat37 = min(u_xlat6.y, u_xlat6.x);\n        u_xlat37 = min(u_xlat6.z, u_xlat37);\n        u_xlat6.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat37) + u_xlat6.xyz;\n    } else {\n        u_xlat3.xyz = u_xlat16_16.xyz;\n    }\n    u_xlat10_3 = textureCubeLodEXT(unity_SpecCube0, u_xlat3.xyz, 6.0);\n    u_xlat16_4.x = u_xlat10_3.w + -1.0;\n    u_xlat16_4.x = unity_SpecCube0_HDR.w * u_xlat16_4.x + 1.0;\n    u_xlat16_4.x = u_xlat16_4.x * unity_SpecCube0_HDR.x;\n    u_xlat16_9.xyz = u_xlat10_3.xyz * u_xlat16_4.xxx;\n    u_xlatb37 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb37){\n        u_xlatb37 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb37){\n            u_xlat37 = dot(u_xlat16_16.xyz, u_xlat16_16.xyz);\n            u_xlat37 = inversesqrt(u_xlat37);\n            u_xlat6.xyz = vec3(u_xlat37) * u_xlat16_16.xyz;\n            u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat7;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat7.x : u_xlat8.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat7.y : u_xlat8.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat7.z : u_xlat8.z;\n                u_xlat7 = hlslcc_movcTemp;\n            }\n            u_xlat37 = min(u_xlat7.y, u_xlat7.x);\n            u_xlat37 = min(u_xlat7.z, u_xlat37);\n            u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat37) + u_xlat7.xyz;\n        } else {\n            u_xlat6.xyz = u_xlat16_16.xyz;\n        }\n        u_xlat10_6 = textureCubeLodEXT(unity_SpecCube1, u_xlat6.xyz, 6.0);\n        u_xlat16_16.x = u_xlat10_6.w + -1.0;\n        u_xlat16_16.x = unity_SpecCube1_HDR.w * u_xlat16_16.x + 1.0;\n        u_xlat16_16.x = u_xlat16_16.x * unity_SpecCube1_HDR.x;\n        u_xlat16_16.xyz = u_xlat10_6.xyz * u_xlat16_16.xxx;\n        u_xlat3.xyz = u_xlat16_4.xxx * u_xlat10_3.xyz + (-u_xlat16_16.xyz);\n        u_xlat9.xyz = unity_SpecCube0_BoxMin.www * u_xlat3.xyz + u_xlat16_16.xyz;\n        u_xlat16_9.xyz = u_xlat9.xyz;\n    }\n    u_xlat37 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat37 = inversesqrt(u_xlat37);\n    u_xlat3.xyz = vec3(u_xlat37) * vs_TEXCOORD1.xyz;\n    u_xlat16_4.xyz = u_xlat10_2.xyz * vec3(0.779083729, 0.779083729, 0.779083729);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat36) + _WorldSpaceLightPos0.xyz;\n    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat36 = max(u_xlat36, 0.00100000005);\n    u_xlat36 = inversesqrt(u_xlat36);\n    u_xlat0.xyz = vec3(u_xlat36) * u_xlat0.xyz;\n    u_xlat36 = dot(u_xlat3.xyz, u_xlat1.xyz);\n    u_xlat1.x = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat16_40 = u_xlat0.x + u_xlat0.x;\n    u_xlat16_40 = u_xlat16_40 * u_xlat0.x + -0.5;\n    u_xlat16_41 = (-u_xlat1.x) + 1.0;\n    u_xlat16_45 = u_xlat16_41 * u_xlat16_41;\n    u_xlat16_45 = u_xlat16_45 * u_xlat16_45;\n    u_xlat16_41 = u_xlat16_41 * u_xlat16_45;\n    u_xlat16_41 = u_xlat16_40 * u_xlat16_41 + 1.0;\n    u_xlat16_45 = -abs(u_xlat36) + 1.0;\n    u_xlat16_11.x = u_xlat16_45 * u_xlat16_45;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_45 = u_xlat16_45 * u_xlat16_11.x;\n    u_xlat16_40 = u_xlat16_40 * u_xlat16_45 + 1.0;\n    u_xlat16_40 = u_xlat16_40 * u_xlat16_41;\n    u_xlat12.x = u_xlat1.x * u_xlat16_40;\n    u_xlat24 = abs(u_xlat36) + u_xlat1.x;\n    u_xlat24 = u_xlat24 + 9.99999975e-06;\n    u_xlat24 = 0.5 / u_xlat24;\n    u_xlat24 = u_xlat24 * 0.999999881;\n    u_xlat24 = max(u_xlat24, 9.99999975e-05);\n    u_xlat24 = sqrt(u_xlat24);\n    u_xlat24 = u_xlat1.x * u_xlat24;\n    u_xlat16_11.xyz = u_xlat12.xxx * u_xlat16_5.xyz;\n    u_xlat12.xyz = u_xlat16_5.xyz * vec3(u_xlat24);\n    u_xlat16_40 = (-u_xlat0.x) + 1.0;\n    u_xlat16_5.x = u_xlat16_40 * u_xlat16_40;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_40 = u_xlat16_40 * u_xlat16_5.x;\n    u_xlat16_40 = u_xlat16_40 * 0.779083729 + 0.220916301;\n    u_xlat0.xyz = u_xlat12.xyz * vec3(u_xlat16_40);\n    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_11.xyz + u_xlat0.xyz;\n    u_xlat16_4.xyz = u_xlat16_9.xyz * vec3(0.720000029, 0.720000029, 0.720000029);\n    u_xlat16_40 = u_xlat16_45 * -2.98023224e-08 + 0.220916301;\n    u_xlat0.xyz = u_xlat16_4.xyz * vec3(u_xlat16_40) + u_xlat0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\nuniform \tvec4 _ProjectionParams;\nuniform \tvec4 unity_4LightPosX0;\nuniform \tvec4 unity_4LightPosY0;\nuniform \tvec4 unity_4LightPosZ0;\nuniform \tmediump vec4 unity_4LightAtten0;\nuniform \tmediump vec4 unity_LightColor[8];\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying mediump vec3 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD6;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nvec4 u_xlat3;\nvec4 u_xlat4;\nvec4 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nfloat u_xlat24;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    gl_Position = u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;\n    vs_TEXCOORD1.xyz = u_xlat2.xyz;\n    vs_TEXCOORD2.xyz = u_xlat0.xyz;\n    u_xlat3 = (-u_xlat0.xxxx) + unity_4LightPosX0;\n    u_xlat4 = (-u_xlat0.yyyy) + unity_4LightPosY0;\n    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;\n    u_xlat5 = u_xlat2.yyyy * u_xlat4;\n    u_xlat4 = u_xlat4 * u_xlat4;\n    u_xlat4 = u_xlat3 * u_xlat3 + u_xlat4;\n    u_xlat3 = u_xlat3 * u_xlat2.xxxx + u_xlat5;\n    u_xlat3 = u_xlat0 * u_xlat2.zzzz + u_xlat3;\n    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat4;\n    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));\n    u_xlat4 = inversesqrt(u_xlat0);\n    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);\n    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;\n    u_xlat3 = u_xlat3 * u_xlat4;\n    u_xlat3 = max(u_xlat3, vec4(0.0, 0.0, 0.0, 0.0));\n    u_xlat0 = u_xlat0 * u_xlat3;\n    u_xlat3.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;\n    u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat3.xyz;\n    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat3.xyz;\n    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;\n    u_xlat3.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);\n    u_xlat3.xyz = u_xlat0.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);\n    u_xlat16_6.x = u_xlat2.y * u_xlat2.y;\n    u_xlat16_6.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_6.x);\n    u_xlat16_2 = u_xlat2.yzzx * u_xlat2.xyzz;\n    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_2);\n    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_2);\n    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_2);\n    u_xlat16_6.xyz = unity_SHC.xyz * u_xlat16_6.xxx + u_xlat16_7.xyz;\n    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat3.xyz + u_xlat16_6.xyz;\n    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;\n    u_xlat0.w = u_xlat0.x * 0.5;\n    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);\n    vs_TEXCOORD5.zw = u_xlat1.zw;\n    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;\n    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _ShadowMapTexture;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying mediump vec3 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nvec3 u_xlat1;\nlowp vec3 u_xlat10_2;\nvec4 u_xlat3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nlowp vec4 u_xlat10_6;\nvec3 u_xlat7;\nlowp vec4 u_xlat10_7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbvec3 u_xlatb10;\nvec3 u_xlat11;\nmediump vec3 u_xlat16_11;\nmediump vec3 u_xlat16_12;\nvec3 u_xlat13;\nmediump vec3 u_xlat16_17;\nfloat u_xlat26;\nfloat u_xlat39;\nfloat u_xlat40;\nbool u_xlatb40;\nfloat u_xlat41;\nlowp float u_xlat10_41;\nmediump float u_xlat16_43;\nmediump float u_xlat16_44;\nmediump float u_xlat16_50;\nvoid main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat39 = inversesqrt(u_xlat39);\n    u_xlat1.xyz = vec3(u_xlat39) * u_xlat0.xyz;\n    u_xlat10_2.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat3.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat3.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat3.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat40 = dot(u_xlat0.xyz, u_xlat3.xyz);\n    u_xlat3.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat41 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat41 = sqrt(u_xlat41);\n    u_xlat41 = (-u_xlat40) + u_xlat41;\n    u_xlat40 = unity_ShadowFadeCenterAndType.w * u_xlat41 + u_xlat40;\n    u_xlat40 = u_xlat40 * _LightShadowData.z + _LightShadowData.w;\n    u_xlat40 = clamp(u_xlat40, 0.0, 1.0);\n    u_xlat3.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;\n    u_xlat10_41 = texture2D(_ShadowMapTexture, u_xlat3.xy).x;\n    u_xlat16_4.x = (-u_xlat10_41) + 1.0;\n    u_xlat16_4.x = u_xlat40 * u_xlat16_4.x + u_xlat10_41;\n    u_xlat16_17.x = dot((-u_xlat1.xyz), vs_TEXCOORD1.xyz);\n    u_xlat16_17.x = u_xlat16_17.x + u_xlat16_17.x;\n    u_xlat16_17.xyz = vs_TEXCOORD1.xyz * (-u_xlat16_17.xxx) + (-u_xlat1.xyz);\n    u_xlat16_5.xyz = u_xlat16_4.xxx * _LightColor0.xyz;\n    u_xlat3.xyz = vs_TEXCOORD1.xyz;\n    u_xlat3.w = 1.0;\n    u_xlat16_6.x = dot(unity_SHAr, u_xlat3);\n    u_xlat16_6.y = dot(unity_SHAg, u_xlat3);\n    u_xlat16_6.z = dot(unity_SHAb, u_xlat3);\n    u_xlat16_6.xyz = u_xlat16_6.xyz + vs_TEXCOORD3.xyz;\n    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat3.xyz = log2(u_xlat16_6.xyz);\n    u_xlat3.xyz = u_xlat3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat3.xyz = exp2(u_xlat3.xyz);\n    u_xlat3.xyz = u_xlat3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat3.xyz = max(u_xlat3.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb40 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb40){\n        u_xlat40 = dot(u_xlat16_17.xyz, u_xlat16_17.xyz);\n        u_xlat40 = inversesqrt(u_xlat40);\n        u_xlat7.xyz = vec3(u_xlat40) * u_xlat16_17.xyz;\n        u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n        u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat8;\n            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n            u_xlat8 = hlslcc_movcTemp;\n        }\n        u_xlat40 = min(u_xlat8.y, u_xlat8.x);\n        u_xlat40 = min(u_xlat8.z, u_xlat40);\n        u_xlat8.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat40) + u_xlat8.xyz;\n    } else {\n        u_xlat7.xyz = u_xlat16_17.xyz;\n    }\n    u_xlat10_6 = textureCubeLodEXT(unity_SpecCube0, u_xlat7.xyz, 6.0);\n    u_xlat16_4.x = u_xlat10_6.w + -1.0;\n    u_xlat16_4.x = unity_SpecCube0_HDR.w * u_xlat16_4.x + 1.0;\n    u_xlat16_4.x = u_xlat16_4.x * unity_SpecCube0_HDR.x;\n    u_xlat16_11.xyz = u_xlat10_6.xyz * u_xlat16_4.xxx;\n    u_xlatb40 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb40){\n        u_xlatb40 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb40){\n            u_xlat40 = dot(u_xlat16_17.xyz, u_xlat16_17.xyz);\n            u_xlat40 = inversesqrt(u_xlat40);\n            u_xlat7.xyz = vec3(u_xlat40) * u_xlat16_17.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat8;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n                u_xlat8 = hlslcc_movcTemp;\n            }\n            u_xlat40 = min(u_xlat8.y, u_xlat8.x);\n            u_xlat40 = min(u_xlat8.z, u_xlat40);\n            u_xlat8.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat40) + u_xlat8.xyz;\n        } else {\n            u_xlat7.xyz = u_xlat16_17.xyz;\n        }\n        u_xlat10_7 = textureCubeLodEXT(unity_SpecCube1, u_xlat7.xyz, 6.0);\n        u_xlat16_17.x = u_xlat10_7.w + -1.0;\n        u_xlat16_17.x = unity_SpecCube1_HDR.w * u_xlat16_17.x + 1.0;\n        u_xlat16_17.x = u_xlat16_17.x * unity_SpecCube1_HDR.x;\n        u_xlat16_17.xyz = u_xlat10_7.xyz * u_xlat16_17.xxx;\n        u_xlat7.xyz = u_xlat16_4.xxx * u_xlat10_6.xyz + (-u_xlat16_17.xyz);\n        u_xlat11.xyz = unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat16_17.xyz;\n        u_xlat16_11.xyz = u_xlat11.xyz;\n    }\n    u_xlat40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat40 = inversesqrt(u_xlat40);\n    u_xlat7.xyz = vec3(u_xlat40) * vs_TEXCOORD1.xyz;\n    u_xlat16_4.xyz = u_xlat10_2.xyz * vec3(0.779083729, 0.779083729, 0.779083729);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat39) + _WorldSpaceLightPos0.xyz;\n    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat39 = max(u_xlat39, 0.00100000005);\n    u_xlat39 = inversesqrt(u_xlat39);\n    u_xlat0.xyz = vec3(u_xlat39) * u_xlat0.xyz;\n    u_xlat39 = dot(u_xlat7.xyz, u_xlat1.xyz);\n    u_xlat1.x = dot(u_xlat7.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat16_43 = u_xlat0.x + u_xlat0.x;\n    u_xlat16_43 = u_xlat16_43 * u_xlat0.x + -0.5;\n    u_xlat16_44 = (-u_xlat1.x) + 1.0;\n    u_xlat16_50 = u_xlat16_44 * u_xlat16_44;\n    u_xlat16_50 = u_xlat16_50 * u_xlat16_50;\n    u_xlat16_44 = u_xlat16_44 * u_xlat16_50;\n    u_xlat16_44 = u_xlat16_43 * u_xlat16_44 + 1.0;\n    u_xlat16_50 = -abs(u_xlat39) + 1.0;\n    u_xlat16_12.x = u_xlat16_50 * u_xlat16_50;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_12.x;\n    u_xlat16_50 = u_xlat16_50 * u_xlat16_12.x;\n    u_xlat16_43 = u_xlat16_43 * u_xlat16_50 + 1.0;\n    u_xlat16_43 = u_xlat16_43 * u_xlat16_44;\n    u_xlat13.x = u_xlat1.x * u_xlat16_43;\n    u_xlat26 = abs(u_xlat39) + u_xlat1.x;\n    u_xlat26 = u_xlat26 + 9.99999975e-06;\n    u_xlat26 = 0.5 / u_xlat26;\n    u_xlat26 = u_xlat26 * 0.999999881;\n    u_xlat26 = max(u_xlat26, 9.99999975e-05);\n    u_xlat26 = sqrt(u_xlat26);\n    u_xlat26 = u_xlat1.x * u_xlat26;\n    u_xlat16_12.xyz = u_xlat16_5.xyz * u_xlat13.xxx + u_xlat3.xyz;\n    u_xlat13.xyz = u_xlat16_5.xyz * vec3(u_xlat26);\n    u_xlat16_43 = (-u_xlat0.x) + 1.0;\n    u_xlat16_5.x = u_xlat16_43 * u_xlat16_43;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_43 = u_xlat16_43 * u_xlat16_5.x;\n    u_xlat16_43 = u_xlat16_43 * 0.779083729 + 0.220916301;\n    u_xlat0.xyz = u_xlat13.xyz * vec3(u_xlat16_43);\n    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_12.xyz + u_xlat0.xyz;\n    u_xlat16_4.xyz = u_xlat16_11.xyz * vec3(0.720000029, 0.720000029, 0.720000029);\n    u_xlat16_43 = u_xlat16_50 * -2.98023224e-08 + 0.220916301;\n    u_xlat0.xyz = u_xlat16_4.xyz * vec3(u_xlat16_43) + u_xlat0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nfloat u_xlat10;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;\n    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;\n    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;\n    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;\n    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform highp sampler2D _LightTexture0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nvec3 u_xlat1;\nlowp vec3 u_xlat10_1;\nvec3 u_xlat2;\nmediump vec4 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nfloat u_xlat5;\nmediump float u_xlat16_8;\nfloat u_xlat10;\nmediump float u_xlat16_13;\nfloat u_xlat15;\nmediump float u_xlat16_18;\nvoid main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;\n    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;\n    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;\n    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;\n    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat15 = max(u_xlat15, 0.00100000005);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;\n    u_xlat15 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat15 + u_xlat15;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat15 + -0.5;\n    u_xlat16_8 = (-u_xlat15) + 1.0;\n    u_xlat15 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD1.xyz;\n    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);\n    u_xlat5 = dot(u_xlat2.xyz, u_xlat1.xyz);\n    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);\n    u_xlat16_13 = -abs(u_xlat0.x) + 1.0;\n    u_xlat0.x = abs(u_xlat0.x) + u_xlat5;\n    u_xlat0.x = u_xlat0.x + 9.99999975e-06;\n    u_xlat0.x = 0.5 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * 0.999999881;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat5 * u_xlat0.x;\n    u_xlat16_18 = u_xlat16_13 * u_xlat16_13;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_18;\n    u_xlat16_13 = u_xlat16_3.x * u_xlat16_13 + 1.0;\n    u_xlat16_18 = (-u_xlat5) + 1.0;\n    u_xlat16_4.x = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_4.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_18 + 1.0;\n    u_xlat16_3.x = u_xlat16_13 * u_xlat16_3.x;\n    u_xlat5 = u_xlat5 * u_xlat16_3.x;\n    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat10 = texture2D(_LightTexture0, vec2(u_xlat10)).x;\n    u_xlat16_3.xzw = vec3(u_xlat10) * _LightColor0.xyz;\n    u_xlat16_4.xyz = vec3(u_xlat5) * u_xlat16_3.xzw;\n    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_3.xzw;\n    u_xlat16_3.x = u_xlat16_8 * u_xlat16_8;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_8 * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * 0.779083729 + 0.220916301;\n    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_3.xxx;\n    u_xlat10_1.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_3.xyz = u_xlat10_1.xyz * vec3(0.779083729, 0.779083729, 0.779083729);\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz + u_xlat0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD4;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform lowp sampler2D _MainTex;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nvec3 u_xlat1;\nlowp vec3 u_xlat10_1;\nvec3 u_xlat2;\nmediump vec4 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nmediump float u_xlat16_8;\nmediump float u_xlat16_13;\nfloat u_xlat15;\nfloat u_xlat16;\nmediump float u_xlat16_18;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.xyz = vec3(u_xlat15) * u_xlat1.xyz;\n    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;\n    u_xlat15 = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat16_3.x = -abs(u_xlat15) + 1.0;\n    u_xlat5.x = abs(u_xlat15) + u_xlat0.x;\n    u_xlat5.x = u_xlat5.x + 9.99999975e-06;\n    u_xlat5.x = 0.5 / u_xlat5.x;\n    u_xlat5.x = u_xlat5.x * 0.999999881;\n    u_xlat5.x = max(u_xlat5.x, 9.99999975e-05);\n    u_xlat5.x = sqrt(u_xlat5.x);\n    u_xlat5.x = u_xlat0.x * u_xlat5.x;\n    u_xlat5.xyz = u_xlat5.xxx * _LightColor0.xyz;\n    u_xlat16_8 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_8 = u_xlat16_8 * u_xlat16_8;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_8;\n    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat16 = max(u_xlat16, 0.00100000005);\n    u_xlat16 = inversesqrt(u_xlat16);\n    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;\n    u_xlat1.x = dot(_WorldSpaceLightPos0.xyz, u_xlat1.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat16_8 = u_xlat1.x + u_xlat1.x;\n    u_xlat16_8 = u_xlat16_8 * u_xlat1.x + -0.5;\n    u_xlat16_13 = (-u_xlat1.x) + 1.0;\n    u_xlat16_3.x = u_xlat16_8 * u_xlat16_3.x + 1.0;\n    u_xlat16_18 = (-u_xlat0.x) + 1.0;\n    u_xlat16_4.x = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_4.x;\n    u_xlat16_8 = u_xlat16_8 * u_xlat16_18 + 1.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_8;\n    u_xlat0.x = u_xlat0.x * u_xlat16_3.x;\n    u_xlat16_3.xyw = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat16_4.x = u_xlat16_13 * u_xlat16_13;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_4.x;\n    u_xlat16_13 = u_xlat16_13 * 0.779083729 + 0.220916301;\n    u_xlat0.xyz = u_xlat5.xyz * vec3(u_xlat16_13);\n    u_xlat10_1.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_4.xyz = u_xlat10_1.xyz * vec3(0.779083729, 0.779083729, 0.779083729);\n    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyw + u_xlat0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nfloat u_xlat10;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;\n    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;\n    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;\n    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform highp sampler2D _LightTexture0;\nuniform highp sampler2D _LightTextureB0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvec3 u_xlat1;\nlowp vec3 u_xlat10_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nfloat u_xlat5;\nmediump float u_xlat16_9;\nmediump float u_xlat16_14;\nfloat u_xlat15;\nmediump float u_xlat16_17;\nmediump float u_xlat16_19;\nvoid main()\n{\n    u_xlat0 = vs_TEXCOORD2.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];\n    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD2.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD2.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];\n    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;\n    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);\n    u_xlat15 = texture2D(_LightTexture0, u_xlat1.xy).w;\n    u_xlatb1 = 0.0<u_xlat0.z;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;\n    u_xlat16_2.x = (u_xlatb1) ? 1.0 : 0.0;\n    u_xlat16_2.x = u_xlat15 * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;\n    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;\n    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;\n    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;\n    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;\n    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat15 = max(u_xlat15, 0.00100000005);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;\n    u_xlat15 = dot(u_xlat1.xyz, u_xlat3.xyz);\n    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);\n    u_xlat16_17 = u_xlat15 + u_xlat15;\n    u_xlat16_17 = u_xlat16_17 * u_xlat15 + -0.5;\n    u_xlat16_4.x = (-u_xlat15) + 1.0;\n    u_xlat15 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD1.xyz;\n    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);\n    u_xlat5 = dot(u_xlat3.xyz, u_xlat1.xyz);\n    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);\n    u_xlat16_9 = -abs(u_xlat0.x) + 1.0;\n    u_xlat0.x = abs(u_xlat0.x) + u_xlat5;\n    u_xlat0.x = u_xlat0.x + 9.99999975e-06;\n    u_xlat0.x = 0.5 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * 0.999999881;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat5 * u_xlat0.x;\n    u_xlat0.xzw = u_xlat16_2.xyz * u_xlat0.xxx;\n    u_xlat16_14 = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_14 = u_xlat16_14 * u_xlat16_14;\n    u_xlat16_9 = u_xlat16_9 * u_xlat16_14;\n    u_xlat16_9 = u_xlat16_17 * u_xlat16_9 + 1.0;\n    u_xlat16_14 = (-u_xlat5) + 1.0;\n    u_xlat16_19 = u_xlat16_14 * u_xlat16_14;\n    u_xlat16_19 = u_xlat16_19 * u_xlat16_19;\n    u_xlat16_14 = u_xlat16_14 * u_xlat16_19;\n    u_xlat16_17 = u_xlat16_17 * u_xlat16_14 + 1.0;\n    u_xlat16_17 = u_xlat16_9 * u_xlat16_17;\n    u_xlat5 = u_xlat5 * u_xlat16_17;\n    u_xlat16_2.xyz = vec3(u_xlat5) * u_xlat16_2.xyz;\n    u_xlat16_17 = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_17 = u_xlat16_17 * u_xlat16_17;\n    u_xlat16_17 = u_xlat16_4.x * u_xlat16_17;\n    u_xlat16_17 = u_xlat16_17 * 0.779083729 + 0.220916301;\n    u_xlat0.xyz = u_xlat0.xzw * vec3(u_xlat16_17);\n    u_xlat10_1.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_4.xyz = u_xlat10_1.xyz * vec3(0.779083729, 0.779083729, 0.779083729);\n    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nfloat u_xlat10;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;\n    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;\n    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;\n    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;\n    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform highp sampler2D _LightTextureB0;\nuniform highp samplerCube _LightTexture0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nvec3 u_xlat1;\nlowp vec3 u_xlat10_1;\nvec3 u_xlat2;\nmediump vec4 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nfloat u_xlat5;\nmediump float u_xlat16_8;\nfloat u_xlat10;\nmediump float u_xlat16_13;\nfloat u_xlat15;\nmediump float u_xlat16_18;\nvoid main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;\n    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;\n    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;\n    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;\n    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat15 = max(u_xlat15, 0.00100000005);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;\n    u_xlat15 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat15 + u_xlat15;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat15 + -0.5;\n    u_xlat16_8 = (-u_xlat15) + 1.0;\n    u_xlat15 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD1.xyz;\n    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);\n    u_xlat5 = dot(u_xlat2.xyz, u_xlat1.xyz);\n    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);\n    u_xlat16_13 = -abs(u_xlat0.x) + 1.0;\n    u_xlat0.x = abs(u_xlat0.x) + u_xlat5;\n    u_xlat0.x = u_xlat0.x + 9.99999975e-06;\n    u_xlat0.x = 0.5 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * 0.999999881;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat5 * u_xlat0.x;\n    u_xlat16_18 = u_xlat16_13 * u_xlat16_13;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_18;\n    u_xlat16_13 = u_xlat16_3.x * u_xlat16_13 + 1.0;\n    u_xlat16_18 = (-u_xlat5) + 1.0;\n    u_xlat16_4.x = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_4.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_18 + 1.0;\n    u_xlat16_3.x = u_xlat16_13 * u_xlat16_3.x;\n    u_xlat5 = u_xlat5 * u_xlat16_3.x;\n    u_xlat1.xyz = vs_TEXCOORD2.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD2.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD2.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat15 = textureCube(_LightTexture0, u_xlat1.xyz).w;\n    u_xlat10 = texture2D(_LightTextureB0, vec2(u_xlat10)).x;\n    u_xlat10 = u_xlat15 * u_xlat10;\n    u_xlat16_3.xzw = vec3(u_xlat10) * _LightColor0.xyz;\n    u_xlat16_4.xyz = vec3(u_xlat5) * u_xlat16_3.xzw;\n    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_3.xzw;\n    u_xlat16_3.x = u_xlat16_8 * u_xlat16_8;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_8 * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * 0.779083729 + 0.220916301;\n    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_3.xxx;\n    u_xlat10_1.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_3.xyz = u_xlat10_1.xyz * vec3(0.779083729, 0.779083729, 0.779083729);\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz + u_xlat0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD3;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD4;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nfloat u_xlat9;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;\n    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat0.xy = u_xlat1.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat1.xx + u_xlat0.xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat1.zz + u_xlat0.xy;\n    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat1.ww + u_xlat0.xy;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;\n    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform highp sampler2D _LightTexture0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nvec3 u_xlat1;\nlowp vec3 u_xlat10_1;\nvec3 u_xlat2;\nmediump vec4 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nfloat u_xlat5;\nmediump float u_xlat16_8;\nvec2 u_xlat10;\nmediump vec2 u_xlat16_13;\nfloat u_xlat15;\nmediump float u_xlat16_18;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.xyz = vec3(u_xlat15) * u_xlat1.xyz;\n    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;\n    u_xlat15 = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat16_3.x = -abs(u_xlat15) + 1.0;\n    u_xlat5 = abs(u_xlat15) + u_xlat0.x;\n    u_xlat5 = u_xlat5 + 9.99999975e-06;\n    u_xlat5 = 0.5 / u_xlat5;\n    u_xlat5 = u_xlat5 * 0.999999881;\n    u_xlat5 = max(u_xlat5, 9.99999975e-05);\n    u_xlat5 = sqrt(u_xlat5);\n    u_xlat5 = u_xlat0.x * u_xlat5;\n    u_xlat16_8 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_8 = u_xlat16_8 * u_xlat16_8;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_8;\n    u_xlat10.x = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat10.x = max(u_xlat10.x, 0.00100000005);\n    u_xlat10.x = inversesqrt(u_xlat10.x);\n    u_xlat1.xyz = u_xlat10.xxx * u_xlat1.xyz;\n    u_xlat0.z = dot(_WorldSpaceLightPos0.xyz, u_xlat1.xyz);\n    u_xlat0.z = clamp(u_xlat0.z, 0.0, 1.0);\n    u_xlat16_8 = u_xlat0.z + u_xlat0.z;\n    u_xlat16_8 = u_xlat16_8 * u_xlat0.z + -0.5;\n    u_xlat16_3.x = u_xlat16_8 * u_xlat16_3.x + 1.0;\n    u_xlat16_13.xy = (-u_xlat0.zx) + vec2(1.0, 1.0);\n    u_xlat16_4.x = u_xlat16_13.y * u_xlat16_13.y;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_18 = u_xlat16_13.y * u_xlat16_4.x;\n    u_xlat16_8 = u_xlat16_8 * u_xlat16_18 + 1.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_8;\n    u_xlat0.x = u_xlat0.x * u_xlat16_3.x;\n    u_xlat10.xy = vs_TEXCOORD2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;\n    u_xlat10.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD2.xx + u_xlat10.xy;\n    u_xlat10.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD2.zz + u_xlat10.xy;\n    u_xlat10.xy = u_xlat10.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;\n    u_xlat10.x = texture2D(_LightTexture0, u_xlat10.xy).w;\n    u_xlat16_3.xyw = u_xlat10.xxx * _LightColor0.xyz;\n    u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_3.xyw;\n    u_xlat0.xyz = vec3(u_xlat5) * u_xlat16_3.xyw;\n    u_xlat16_3.x = u_xlat16_13.x * u_xlat16_13.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_13.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * 0.779083729 + 0.220916301;\n    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_3.xxx;\n    u_xlat10_1.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_3.xyz = u_xlat10_1.xyz * vec3(0.779083729, 0.779083729, 0.779083729);\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz + u_xlat0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nfloat u_xlat10;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n    vs_TEXCOORD1.xyz = vec3(u_xlat10) * u_xlat1.xyz;\n    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;\n    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;\n    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToShadow[16];\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform highp sampler2D _ShadowMapTexture;\nuniform highp sampler2D _LightTexture0;\nuniform highp sampler2D _LightTextureB0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nbool u_xlatb0;\nvec3 u_xlat1;\nlowp vec3 u_xlat10_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nvec3 u_xlat4;\nvec3 u_xlat5;\nmediump float u_xlat16_7;\nmediump vec2 u_xlat16_8;\nmediump float u_xlat16_12;\nmediump float u_xlat16_13;\nfloat u_xlat15;\nfloat u_xlat16;\nmediump float u_xlat16_17;\nmediump float u_xlat16_18;\nvoid main()\n{\n    u_xlat0 = vs_TEXCOORD2.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];\n    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD2.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD2.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];\n    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;\n    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);\n    u_xlat15 = texture2D(_LightTexture0, u_xlat1.xy).w;\n    u_xlatb1 = 0.0<u_xlat0.z;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;\n    u_xlat16_2.x = (u_xlatb1) ? 1.0 : 0.0;\n    u_xlat16_2.x = u_xlat15 * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;\n    u_xlat0 = vs_TEXCOORD2.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];\n    u_xlat0 = hlslcc_mtx4x4unity_WorldToShadow[0] * vs_TEXCOORD2.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_WorldToShadow[2] * vs_TEXCOORD2.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToShadow[3];\n    u_xlat0.xyz = u_xlat0.xyz / u_xlat0.www;\n    u_xlat0.x = texture2D(_ShadowMapTexture, u_xlat0.xy).x;\n    u_xlatb0 = u_xlat0.x<u_xlat0.z;\n    u_xlat16_7 = (u_xlatb0) ? _LightShadowData.x : 1.0;\n    u_xlat16_12 = (-u_xlat16_7) + 1.0;\n    u_xlat0.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat5.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.x = dot(u_xlat5.xyz, u_xlat1.xyz);\n    u_xlat0.x = u_xlat0.x + (-u_xlat1.x);\n    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat1.x;\n    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat16_7 = u_xlat0.x * u_xlat16_12 + u_xlat16_7;\n    u_xlat16_2.x = u_xlat16_7 * u_xlat16_2.x;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;\n    u_xlat0.x = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz;\n    u_xlat15 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat1.xyz = vec3(u_xlat15) * vs_TEXCOORD1.xyz;\n    u_xlat15 = dot(u_xlat1.xyz, u_xlat0.xyz);\n    u_xlat16_17 = -abs(u_xlat15) + 1.0;\n    u_xlat16_3.x = u_xlat16_17 * u_xlat16_17;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_17 = u_xlat16_17 * u_xlat16_3.x;\n    u_xlat4.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceLightPos0.xyz;\n    u_xlat16 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat16 = inversesqrt(u_xlat16);\n    u_xlat0.xyz = u_xlat4.xyz * vec3(u_xlat16) + u_xlat0.xyz;\n    u_xlat4.xyz = vec3(u_xlat16) * u_xlat4.xyz;\n    u_xlat16 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat16 = max(u_xlat16, 0.00100000005);\n    u_xlat16 = inversesqrt(u_xlat16);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16);\n    u_xlat0.x = dot(u_xlat4.xyz, u_xlat0.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat0.y = dot(u_xlat1.xyz, u_xlat4.xyz);\n    u_xlat0.y = clamp(u_xlat0.y, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat0.x + u_xlat0.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat0.x + -0.5;\n    u_xlat16_17 = u_xlat16_3.x * u_xlat16_17 + 1.0;\n    u_xlat16_8.xy = (-u_xlat0.xy) + vec2(1.0, 1.0);\n    u_xlat16_18 = u_xlat16_8.y * u_xlat16_8.y;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_13 = u_xlat16_8.y * u_xlat16_18;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_13 + 1.0;\n    u_xlat16_17 = u_xlat16_17 * u_xlat16_3.x;\n    u_xlat0.x = u_xlat0.y * u_xlat16_17;\n    u_xlat16_3.xzw = u_xlat0.xxx * u_xlat16_2.xyz;\n    u_xlat0.x = abs(u_xlat15) + u_xlat0.y;\n    u_xlat0.x = u_xlat0.x + 9.99999975e-06;\n    u_xlat0.x = 0.5 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * 0.999999881;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat0.y * u_xlat0.x;\n    u_xlat0.xyz = u_xlat16_2.xyz * u_xlat0.xxx;\n    u_xlat16_2.x = u_xlat16_8.x * u_xlat16_8.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_8.x * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * 0.779083729 + 0.220916301;\n    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xxx;\n    u_xlat10_1.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(0.779083729, 0.779083729, 0.779083729);\n    u_xlat0.xyz = u_xlat16_2.xyz * u_xlat16_3.xzw + u_xlat0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\nuniform \tvec4 _ProjectionParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD4;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat7;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;\n    gl_Position = u_xlat0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat7 = inversesqrt(u_xlat7);\n    vs_TEXCOORD1.xyz = vec3(u_xlat7) * u_xlat1.xyz;\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    vs_TEXCOORD4.zw = u_xlat0.zw;\n    vs_TEXCOORD4.xy = u_xlat1.zz + u_xlat1.xw;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _ShadowMapTexture;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nvec3 u_xlat1;\nlowp vec3 u_xlat10_1;\nvec3 u_xlat2;\nvec3 u_xlat3;\nmediump vec4 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nfloat u_xlat6;\nmediump float u_xlat16_10;\nfloat u_xlat12;\nmediump vec2 u_xlat16_16;\nfloat u_xlat18;\nlowp float u_xlat10_18;\nmediump float u_xlat16_22;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat18 = inversesqrt(u_xlat18);\n    u_xlat2.xyz = vec3(u_xlat18) * u_xlat1.xyz;\n    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat18) + _WorldSpaceLightPos0.xyz;\n    u_xlat18 = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat16_4.x = -abs(u_xlat18) + 1.0;\n    u_xlat6 = abs(u_xlat18) + u_xlat0.x;\n    u_xlat6 = u_xlat6 + 9.99999975e-06;\n    u_xlat6 = 0.5 / u_xlat6;\n    u_xlat6 = u_xlat6 * 0.999999881;\n    u_xlat6 = max(u_xlat6, 9.99999975e-05);\n    u_xlat6 = sqrt(u_xlat6);\n    u_xlat6 = u_xlat0.x * u_xlat6;\n    u_xlat16_10 = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_10;\n    u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat12 = max(u_xlat12, 0.00100000005);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat2.xyz = vec3(u_xlat12) * u_xlat3.xyz;\n    u_xlat0.z = dot(_WorldSpaceLightPos0.xyz, u_xlat2.xyz);\n    u_xlat0.z = clamp(u_xlat0.z, 0.0, 1.0);\n    u_xlat16_10 = u_xlat0.z + u_xlat0.z;\n    u_xlat16_10 = u_xlat16_10 * u_xlat0.z + -0.5;\n    u_xlat16_4.x = u_xlat16_10 * u_xlat16_4.x + 1.0;\n    u_xlat16_16.xy = (-u_xlat0.zx) + vec2(1.0, 1.0);\n    u_xlat16_5.x = u_xlat16_16.y * u_xlat16_16.y;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_22 = u_xlat16_16.y * u_xlat16_5.x;\n    u_xlat16_10 = u_xlat16_10 * u_xlat16_22 + 1.0;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_10;\n    u_xlat0.x = u_xlat0.x * u_xlat16_4.x;\n    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat12 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat18 = sqrt(u_xlat18);\n    u_xlat18 = (-u_xlat12) + u_xlat18;\n    u_xlat12 = unity_ShadowFadeCenterAndType.w * u_xlat18 + u_xlat12;\n    u_xlat12 = u_xlat12 * _LightShadowData.z + _LightShadowData.w;\n    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);\n    u_xlat1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;\n    u_xlat10_18 = texture2D(_ShadowMapTexture, u_xlat1.xy).x;\n    u_xlat16_4.x = (-u_xlat10_18) + 1.0;\n    u_xlat16_4.x = u_xlat12 * u_xlat16_4.x + u_xlat10_18;\n    u_xlat16_4.xyw = u_xlat16_4.xxx * _LightColor0.xyz;\n    u_xlat16_5.xyz = u_xlat0.xxx * u_xlat16_4.xyw;\n    u_xlat0.xyz = vec3(u_xlat6) * u_xlat16_4.xyw;\n    u_xlat16_4.x = u_xlat16_16.x * u_xlat16_16.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_16.x * u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_4.x * 0.779083729 + 0.220916301;\n    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_4.xxx;\n    u_xlat10_1.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_4.xyz = u_xlat10_1.xyz * vec3(0.779083729, 0.779083729, 0.779083729);\n    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_5.xyz + u_xlat0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","#version 100\n\nuniform \tvec4 _ProjectionParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD3;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD4;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nfloat u_xlat9;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    gl_Position = u_xlat1;\n    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;\n    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat0.xy = u_xlat2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat2.xx + u_xlat0.xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat2.zz + u_xlat0.xy;\n    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat2.ww + u_xlat0.xy;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n    vs_TEXCOORD1.xyz = vec3(u_xlat9) * u_xlat0.xyz;\n    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;\n    u_xlat0.w = u_xlat0.x * 0.5;\n    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);\n    vs_TEXCOORD4.zw = u_xlat1.zw;\n    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _ShadowMapTexture;\nuniform highp sampler2D _LightTexture0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nvec3 u_xlat1;\nlowp vec3 u_xlat10_1;\nvec3 u_xlat2;\nvec3 u_xlat3;\nmediump vec4 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nfloat u_xlat6;\nmediump float u_xlat16_10;\nvec2 u_xlat12;\nmediump vec2 u_xlat16_16;\nfloat u_xlat18;\nlowp float u_xlat10_18;\nmediump float u_xlat16_22;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat18 = inversesqrt(u_xlat18);\n    u_xlat2.xyz = vec3(u_xlat18) * u_xlat1.xyz;\n    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat18) + _WorldSpaceLightPos0.xyz;\n    u_xlat18 = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat16_4.x = -abs(u_xlat18) + 1.0;\n    u_xlat6 = abs(u_xlat18) + u_xlat0.x;\n    u_xlat6 = u_xlat6 + 9.99999975e-06;\n    u_xlat6 = 0.5 / u_xlat6;\n    u_xlat6 = u_xlat6 * 0.999999881;\n    u_xlat6 = max(u_xlat6, 9.99999975e-05);\n    u_xlat6 = sqrt(u_xlat6);\n    u_xlat6 = u_xlat0.x * u_xlat6;\n    u_xlat16_10 = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_10 = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_10;\n    u_xlat12.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat12.x = max(u_xlat12.x, 0.00100000005);\n    u_xlat12.x = inversesqrt(u_xlat12.x);\n    u_xlat2.xyz = u_xlat12.xxx * u_xlat3.xyz;\n    u_xlat0.z = dot(_WorldSpaceLightPos0.xyz, u_xlat2.xyz);\n    u_xlat0.z = clamp(u_xlat0.z, 0.0, 1.0);\n    u_xlat16_10 = u_xlat0.z + u_xlat0.z;\n    u_xlat16_10 = u_xlat16_10 * u_xlat0.z + -0.5;\n    u_xlat16_4.x = u_xlat16_10 * u_xlat16_4.x + 1.0;\n    u_xlat16_16.xy = (-u_xlat0.zx) + vec2(1.0, 1.0);\n    u_xlat16_5.x = u_xlat16_16.y * u_xlat16_16.y;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_22 = u_xlat16_16.y * u_xlat16_5.x;\n    u_xlat16_10 = u_xlat16_10 * u_xlat16_22 + 1.0;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_10;\n    u_xlat0.x = u_xlat0.x * u_xlat16_4.x;\n    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat12.x = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat1.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat18 = sqrt(u_xlat18);\n    u_xlat18 = (-u_xlat12.x) + u_xlat18;\n    u_xlat12.x = unity_ShadowFadeCenterAndType.w * u_xlat18 + u_xlat12.x;\n    u_xlat12.x = u_xlat12.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);\n    u_xlat1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;\n    u_xlat10_18 = texture2D(_ShadowMapTexture, u_xlat1.xy).x;\n    u_xlat16_4.x = (-u_xlat10_18) + 1.0;\n    u_xlat16_4.x = u_xlat12.x * u_xlat16_4.x + u_xlat10_18;\n    u_xlat12.xy = vs_TEXCOORD2.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;\n    u_xlat12.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD2.xx + u_xlat12.xy;\n    u_xlat12.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD2.zz + u_xlat12.xy;\n    u_xlat12.xy = u_xlat12.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;\n    u_xlat12.x = texture2D(_LightTexture0, u_xlat12.xy).w;\n    u_xlat12.x = u_xlat16_4.x * u_xlat12.x;\n    u_xlat16_4.xyw = u_xlat12.xxx * _LightColor0.xyz;\n    u_xlat16_5.xyz = u_xlat0.xxx * u_xlat16_4.xyw;\n    u_xlat0.xyz = vec3(u_xlat6) * u_xlat16_4.xyw;\n    u_xlat16_4.x = u_xlat16_16.x * u_xlat16_16.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_16.x * u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_4.x * 0.779083729 + 0.220916301;\n    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_4.xxx;\n    u_xlat10_1.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_4.xyz = u_xlat10_1.xyz * vec3(0.779083729, 0.779083729, 0.779083729);\n    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_5.xyz + u_xlat0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"]